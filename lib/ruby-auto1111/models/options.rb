=begin
#FastAPI

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.46
=end

require 'date'

module Rauto1111AI
  class Options
    # Always save all generated images
    attr_accessor :samples_save

    # File format for images
    attr_accessor :samples_format

    # Images filename pattern
    attr_accessor :samples_filename_pattern

    # Add number to filename when saving
    attr_accessor :save_images_add_number

    # Always save all generated image grids
    attr_accessor :grid_save

    # File format for grids
    attr_accessor :grid_format

    # Add extended info (seed, prompt) to filename when saving grid
    attr_accessor :grid_extended_filename

    # Do not save grids consisting of one picture
    attr_accessor :grid_only_if_multiple

    # Prevent empty spots in grid (when set to autodetect)
    attr_accessor :grid_prevent_empty_spots

    # Archive filename pattern
    attr_accessor :grid_zip_filename_pattern

    # Grid row count; use -1 for autodetect and 0 for it to be same as batch size
    attr_accessor :n_rows

    # Font for image grids that have text
    attr_accessor :font

    # Text color for image grids
    attr_accessor :grid_text_active_color

    # Inactive text color for image grids
    attr_accessor :grid_text_inactive_color

    # Background color for image grids
    attr_accessor :grid_background_color

    # Save text information about generation parameters as chunks to png files
    attr_accessor :enable_pnginfo

    # Create a text file next to every image with generation parameters.
    attr_accessor :save_txt

    # Save a copy of image before doing face restoration.
    attr_accessor :save_images_before_face_restoration

    # Save a copy of image before applying highres fix.
    attr_accessor :save_images_before_highres_fix

    # Save a copy of image before applying color correction to img2img results
    attr_accessor :save_images_before_color_correction

    # For inpainting, save a copy of the greyscale mask
    attr_accessor :save_mask

    # For inpainting, save a masked composite
    attr_accessor :save_mask_composite

    # Quality for saved jpeg images
    attr_accessor :jpeg_quality

    # Use lossless compression for webp images
    attr_accessor :webp_lossless

    # Save copy of large images as JPG
    attr_accessor :export_for_4chan

    # File size limit for the above option, MB
    attr_accessor :img_downscale_threshold

    # Width/height limit for the above option, in pixels
    attr_accessor :target_side_length

    # Maximum image size
    attr_accessor :img_max_size_mp

    # Use original name for output filename during batch process in extras tab
    attr_accessor :use_original_name_batch

    # Use upscaler name as filename suffix in the extras tab
    attr_accessor :use_upscaler_name_as_suffix

    # When using 'Save' button, only save a single selected image
    attr_accessor :save_selected_only

    # Save init images when using img2img
    attr_accessor :save_init_img

    # Directory for temporary images; leave empty for default
    attr_accessor :temp_dir

    # Cleanup non-default temporary directory when starting webui
    attr_accessor :clean_temp_dir_at_start

    # Output directory for images; if empty, defaults to three directories below
    attr_accessor :outdir_samples

    # Output directory for txt2img images
    attr_accessor :outdir_txt2img_samples

    # Output directory for img2img images
    attr_accessor :outdir_img2img_samples

    # Output directory for images from extras tab
    attr_accessor :outdir_extras_samples

    # Output directory for grids; if empty, defaults to two directories below
    attr_accessor :outdir_grids

    # Output directory for txt2img grids
    attr_accessor :outdir_txt2img_grids

    # Output directory for img2img grids
    attr_accessor :outdir_img2img_grids

    # Directory for saving images using the Save button
    attr_accessor :outdir_save

    # Directory for saving init images when using img2img
    attr_accessor :outdir_init_images

    # Save images to a subdirectory
    attr_accessor :save_to_dirs

    # Save grids to a subdirectory
    attr_accessor :grid_save_to_dirs

    # When using \"Save\" button, save images to a subdirectory
    attr_accessor :use_save_to_dirs_for_ui

    # Directory name pattern
    attr_accessor :directories_filename_pattern

    # Max prompt words for [prompt_words] pattern
    attr_accessor :directories_max_prompt_words

    # Tile size for ESRGAN upscalers.
    attr_accessor :esrgan_tile

    # Tile overlap for ESRGAN upscalers.
    attr_accessor :esrgan_tile_overlap

    # Select which Real-ESRGAN models to show in the web UI.
    attr_accessor :realesrgan_enabled_models

    # Upscaler for img2img
    attr_accessor :upscaler_for_img2img

    # Face restoration model
    attr_accessor :face_restoration_model

    # CodeFormer weight
    attr_accessor :code_former_weight

    # Move face restoration model from VRAM into RAM after processing
    attr_accessor :face_restoration_unload

    # Show warnings in console.
    attr_accessor :show_warnings

    # VRAM usage polls per second during generation.
    attr_accessor :memmon_poll_rate

    # Always print all generation info to standard output
    attr_accessor :samples_log_stdout

    # Add a second progress bar to the console that shows progress for an entire job.
    attr_accessor :multiple_tqdm

    # Print extra hypernetwork information to console.
    attr_accessor :print_hypernet_extra

    # Load models/files in hidden directories
    attr_accessor :list_hidden_files

    # Disable memmapping for loading .safetensors files.
    attr_accessor :disable_mmap_load_safetensors

    # Move VAE and CLIP to RAM when training if possible. Saves VRAM.
    attr_accessor :unload_models_when_training

    # Turn on pin_memory for DataLoader. Makes training slightly faster but can increase memory usage.
    attr_accessor :pin_memory

    # Saves Optimizer state as separate *.optim file. Training of embedding or HN can be resumed with the matching optim file.
    attr_accessor :save_optimizer_state

    # Save textual inversion and hypernet settings to a text file whenever training starts.
    attr_accessor :save_training_settings_to_txt

    # Filename word regex
    attr_accessor :dataset_filename_word_regex

    # Filename join string
    attr_accessor :dataset_filename_join_string

    # Number of repeats for a single input image per epoch; used only for displaying epoch number
    attr_accessor :training_image_repeats_per_epoch

    # Save an csv containing the loss to log directory every N steps, 0 to disable
    attr_accessor :training_write_csv_every

    # Use cross attention optimizations while training
    attr_accessor :training_xattention_optimizations

    # Enable tensorboard logging.
    attr_accessor :training_enable_tensorboard

    # Save generated images within tensorboard.
    attr_accessor :training_tensorboard_save_images

    # How often, in seconds, to flush the pending tensorboard events and summaries to disk.
    attr_accessor :training_tensorboard_flush_every

    # Stable Diffusion checkpoint
    attr_accessor :sd_model_checkpoint

    # Checkpoints to cache in RAM
    attr_accessor :sd_checkpoint_cache

    # VAE Checkpoints to cache in RAM
    attr_accessor :sd_vae_checkpoint_cache

    # SD VAE
    attr_accessor :sd_vae

    # Ignore selected VAE for stable diffusion checkpoints that have their own .vae.pt next to them
    attr_accessor :sd_vae_as_default

    # SD Unet
    attr_accessor :sd_unet

    # Inpainting conditioning mask strength
    attr_accessor :inpainting_mask_weight

    # Noise multiplier for img2img
    attr_accessor :initial_noise_multiplier

    # Apply color correction to img2img results to match original colors.
    attr_accessor :img2img_color_correction

    # With img2img, do exactly the amount of steps the slider specifies.
    attr_accessor :img2img_fix_steps

    # With img2img, fill image's transparent parts with this color.
    attr_accessor :img2img_background_color

    # Enable quantization in K samplers for sharper and cleaner results. This may change existing seeds. Requires restart to apply.
    attr_accessor :enable_quantization

    # Enable emphasis
    attr_accessor :enable_emphasis

    # Make K-diffusion samplers produce same images in a batch as when making a single image
    attr_accessor :enable_batch_seeds

    # Prompt word wrap length limit
    attr_accessor :comma_padding_backtrack

    # Clip skip
    attr_accessor :clip_stop_at_last_layers

    # Upcast cross attention layer to float32
    attr_accessor :upcast_attn

    # Automaticlly revert VAE to 32-bit floats
    attr_accessor :auto_vae_precision

    # Random number generator source.
    attr_accessor :randn_source

    # crop top coordinate
    attr_accessor :sdxl_crop_top

    # crop left coordinate
    attr_accessor :sdxl_crop_left

    # SDXL low aesthetic score
    attr_accessor :sdxl_refiner_low_aesthetic_score

    # SDXL high aesthetic score
    attr_accessor :sdxl_refiner_high_aesthetic_score

    # Cross attention optimization
    attr_accessor :cross_attention_optimization

    # Negative Guidance minimum sigma
    attr_accessor :s_min_uncond

    # Token merging ratio
    attr_accessor :token_merging_ratio

    # Token merging ratio for img2img
    attr_accessor :token_merging_ratio_img2img

    # Token merging ratio for high-res pass
    attr_accessor :token_merging_ratio_hr

    # Pad prompt/negative prompt to be same length
    attr_accessor :pad_cond_uncond

    # persistent cond cache
    attr_accessor :experimental_persistent_cond_cache

    # Use old emphasis implementation. Can be useful to reproduce old seeds.
    attr_accessor :use_old_emphasis_implementation

    # Use old karras scheduler sigmas (0.1 to 10).
    attr_accessor :use_old_karras_scheduler_sigmas

    # Do not make DPM++ SDE deterministic across different batch sizes.
    attr_accessor :no_dpmpp_sde_batch_determinism

    # For hires fix, use width/height sliders to set final resolution rather than first pass (disables Upscale by, Resize width/height to).
    attr_accessor :use_old_hires_fix_width_height

    # Do not fix prompt schedule for second order samplers.
    attr_accessor :dont_fix_second_order_samplers_schedule

    # For hires fix, calculate conds of second pass using extra networks of first pass.
    attr_accessor :hires_fix_use_firstpass_conds

    # Keep models in VRAM
    attr_accessor :interrogate_keep_models_in_memory

    # Include ranks of model tags matches in results.
    attr_accessor :interrogate_return_ranks

    # BLIP: num_beams
    attr_accessor :interrogate_clip_num_beams

    # BLIP: minimum description length
    attr_accessor :interrogate_clip_min_length

    # BLIP: maximum description length
    attr_accessor :interrogate_clip_max_length

    # CLIP: maximum number of lines in text file
    attr_accessor :interrogate_clip_dict_limit

    # CLIP: skip inquire categories
    attr_accessor :interrogate_clip_skip_categories

    # deepbooru: score threshold
    attr_accessor :interrogate_deepbooru_score_threshold

    # deepbooru: sort tags alphabetically
    attr_accessor :deepbooru_sort_alpha

    # deepbooru: use spaces in tags
    attr_accessor :deepbooru_use_spaces

    # deepbooru: escape (\\) brackets
    attr_accessor :deepbooru_escape

    # deepbooru: filter out those tags
    attr_accessor :deepbooru_filter_tags

    # Show hidden directories
    attr_accessor :extra_networks_show_hidden_directories

    # Show cards for models in hidden directories
    attr_accessor :extra_networks_hidden_models

    # Default multiplier for extra networks
    attr_accessor :extra_networks_default_multiplier

    # Card width for Extra Networks
    attr_accessor :extra_networks_card_width

    # Card height for Extra Networks
    attr_accessor :extra_networks_card_height

    # Card text scale
    attr_accessor :extra_networks_card_text_scale

    # Show description on card
    attr_accessor :extra_networks_card_show_desc

    # Extra networks separator
    attr_accessor :extra_networks_add_text_separator

    # Extra networks tab order
    attr_accessor :ui_extra_networks_tab_reorder

    # Print a list of Textual Inversion embeddings when loading model
    attr_accessor :textual_inversion_print_at_load

    # Add Textual Inversion hashes to infotext
    attr_accessor :textual_inversion_add_hashes_to_infotext

    # Add hypernetwork to prompt
    attr_accessor :sd_hypernetwork

    # Localization
    attr_accessor :localization

    # Gradio theme
    attr_accessor :gradio_theme

    # img2img: height of image editor
    attr_accessor :img2img_editor_height

    # Show grid in results for web
    attr_accessor :return_grid

    # For inpainting, include the greyscale mask in results for web
    attr_accessor :return_mask

    # For inpainting, include masked composite in results for web
    attr_accessor :return_mask_composite

    # Do not show any images in results for web
    attr_accessor :do_not_show_images

    # Send seed when sending prompt or image to other interface
    attr_accessor :send_seed

    # Send size when sending prompt or image to another interface
    attr_accessor :send_size

    # Enable full page image viewer
    attr_accessor :js_modal_lightbox

    # Show images zoomed in by default in full page image viewer
    attr_accessor :js_modal_lightbox_initially_zoomed

    # Navigate image viewer with gamepad
    attr_accessor :js_modal_lightbox_gamepad

    # Gamepad repeat period, in milliseconds
    attr_accessor :js_modal_lightbox_gamepad_repeat

    # Show generation progress in window title.
    attr_accessor :show_progress_in_title

    # Use dropdown for sampler selection instead of radio group
    attr_accessor :samplers_in_dropdown

    # Show Width/Height and Batch sliders in same row
    attr_accessor :dimensions_and_batch_together

    # Ctrl+up/down precision when editing (attention:1.1)
    attr_accessor :keyedit_precision_attention

    # Ctrl+up/down precision when editing <extra networks:0.9>
    attr_accessor :keyedit_precision_extra

    # Ctrl+up/down word delimiters
    attr_accessor :keyedit_delimiters

    # Alt+left/right moves prompt elements
    attr_accessor :keyedit_move

    # Quicksettings list
    attr_accessor :quicksettings_list

    # UI tab order
    attr_accessor :ui_tab_order

    # Hidden UI tabs
    attr_accessor :hidden_tabs

    # txt2img/img2img UI item order
    attr_accessor :ui_reorder_list

    # Hires fix: show hires sampler selection
    attr_accessor :hires_fix_show_sampler

    # Hires fix: show hires prompt and negative prompt
    attr_accessor :hires_fix_show_prompts

    # Disable prompt token counters
    attr_accessor :disable_token_counters

    # Add model hash to generation information
    attr_accessor :add_model_hash_to_info

    # Add model name to generation information
    attr_accessor :add_model_name_to_info

    # Add user name to generation information when authenticated
    attr_accessor :add_user_name_to_info

    # Add program version to generation information
    attr_accessor :add_version_to_infotext

    # Disregard checkpoint information from pasted infotext
    attr_accessor :disable_weights_auto_swap

    # Infer styles from prompts of pasted infotext
    attr_accessor :infotext_styles

    # Show progressbar
    attr_accessor :show_progressbar

    # Show live previews of the created image
    attr_accessor :live_previews_enable

    # Live preview file format
    attr_accessor :live_previews_image_format

    # Show previews of all images generated in a batch as a grid
    attr_accessor :show_progress_grid

    # Live preview display period
    attr_accessor :show_progress_every_n_steps

    # Live preview method
    attr_accessor :show_progress_type

    # Live preview subject
    attr_accessor :live_preview_content

    # Progressbar and preview update period
    attr_accessor :live_preview_refresh_period

    # Hide samplers in user interface
    attr_accessor :hide_samplers

    # Eta for DDIM
    attr_accessor :eta_ddim

    # Eta for ancestral samplers
    attr_accessor :eta_ancestral

    # img2img DDIM discretize
    attr_accessor :ddim_discretize

    # sigma churn
    attr_accessor :s_churn

    # sigma tmin
    attr_accessor :s_tmin

    # sigma noise
    attr_accessor :s_noise

    # scheduler type
    attr_accessor :k_sched_type

    # sigma min
    attr_accessor :sigma_min

    # sigma max
    attr_accessor :sigma_max

    # rho
    attr_accessor :rho

    # Eta noise seed delta
    attr_accessor :eta_noise_seed_delta

    # Always discard next-to-last sigma
    attr_accessor :always_discard_next_to_last_sigma

    # UniPC variant
    attr_accessor :uni_pc_variant

    # UniPC skip type
    attr_accessor :uni_pc_skip_type

    # UniPC order
    attr_accessor :uni_pc_order

    # UniPC lower order final
    attr_accessor :uni_pc_lower_order_final

    # Enable postprocessing operations in txt2img and img2img tabs
    attr_accessor :postprocessing_enable_in_main_ui

    # Postprocessing operation order
    attr_accessor :postprocessing_operation_order

    # Maximum number of images in upscaling cache
    attr_accessor :upscaling_max_images_in_cache

    # Disable these extensions
    attr_accessor :disabled_extensions

    # Disable all extensions (preserves the list of disabled extensions)
    attr_accessor :disable_all_extensions

    # Config state file to restore from, under 'config-states/' folder
    attr_accessor :restore_config_state_file

    # SHA256 hash of the current checkpoint
    attr_accessor :sd_checkpoint_hash

    # Add network to prompt
    attr_accessor :sd_lora

    # When adding to prompt, refer to Lora by
    attr_accessor :lora_preferred_name

    # Add Lora hashes to infotext
    attr_accessor :lora_add_hashes_to_infotext

    # Always show all networks on the Lora page
    attr_accessor :lora_show_all

    # Hide networks of unknown versions for model versions
    attr_accessor :lora_hide_unknown_for_versions

    # Lora/Networks: use old method that takes longer when you have multiple Loras active and produces same results as kohya-ss/sd-webui-additional-networks extension
    attr_accessor :lora_functional

    # Zoom canvas
    attr_accessor :canvas_hotkey_zoom

    # Adjust brush size
    attr_accessor :canvas_hotkey_adjust

    # Moving the canvas
    attr_accessor :canvas_hotkey_move

    # Fullscreen Mode, maximizes the picture so that it fits into the screen and stretches it to its full width 
    attr_accessor :canvas_hotkey_fullscreen

    # Reset zoom and canvas positon
    attr_accessor :canvas_hotkey_reset

    # Toggle overlap
    attr_accessor :canvas_hotkey_overlap

    # Enable tooltip on the canvas
    attr_accessor :canvas_show_tooltip

    # Take the focus off the prompt when working with a canvas
    attr_accessor :canvas_blur_prompt

    # Disable function that you don't use
    attr_accessor :canvas_disabled_functions

    # Options in main UI
    attr_accessor :extra_options

    # Place options in main UI into an accordion
    attr_accessor :extra_options_accordion

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'samples_save' => :'samples_save',
        :'samples_format' => :'samples_format',
        :'samples_filename_pattern' => :'samples_filename_pattern',
        :'save_images_add_number' => :'save_images_add_number',
        :'grid_save' => :'grid_save',
        :'grid_format' => :'grid_format',
        :'grid_extended_filename' => :'grid_extended_filename',
        :'grid_only_if_multiple' => :'grid_only_if_multiple',
        :'grid_prevent_empty_spots' => :'grid_prevent_empty_spots',
        :'grid_zip_filename_pattern' => :'grid_zip_filename_pattern',
        :'n_rows' => :'n_rows',
        :'font' => :'font',
        :'grid_text_active_color' => :'grid_text_active_color',
        :'grid_text_inactive_color' => :'grid_text_inactive_color',
        :'grid_background_color' => :'grid_background_color',
        :'enable_pnginfo' => :'enable_pnginfo',
        :'save_txt' => :'save_txt',
        :'save_images_before_face_restoration' => :'save_images_before_face_restoration',
        :'save_images_before_highres_fix' => :'save_images_before_highres_fix',
        :'save_images_before_color_correction' => :'save_images_before_color_correction',
        :'save_mask' => :'save_mask',
        :'save_mask_composite' => :'save_mask_composite',
        :'jpeg_quality' => :'jpeg_quality',
        :'webp_lossless' => :'webp_lossless',
        :'export_for_4chan' => :'export_for_4chan',
        :'img_downscale_threshold' => :'img_downscale_threshold',
        :'target_side_length' => :'target_side_length',
        :'img_max_size_mp' => :'img_max_size_mp',
        :'use_original_name_batch' => :'use_original_name_batch',
        :'use_upscaler_name_as_suffix' => :'use_upscaler_name_as_suffix',
        :'save_selected_only' => :'save_selected_only',
        :'save_init_img' => :'save_init_img',
        :'temp_dir' => :'temp_dir',
        :'clean_temp_dir_at_start' => :'clean_temp_dir_at_start',
        :'outdir_samples' => :'outdir_samples',
        :'outdir_txt2img_samples' => :'outdir_txt2img_samples',
        :'outdir_img2img_samples' => :'outdir_img2img_samples',
        :'outdir_extras_samples' => :'outdir_extras_samples',
        :'outdir_grids' => :'outdir_grids',
        :'outdir_txt2img_grids' => :'outdir_txt2img_grids',
        :'outdir_img2img_grids' => :'outdir_img2img_grids',
        :'outdir_save' => :'outdir_save',
        :'outdir_init_images' => :'outdir_init_images',
        :'save_to_dirs' => :'save_to_dirs',
        :'grid_save_to_dirs' => :'grid_save_to_dirs',
        :'use_save_to_dirs_for_ui' => :'use_save_to_dirs_for_ui',
        :'directories_filename_pattern' => :'directories_filename_pattern',
        :'directories_max_prompt_words' => :'directories_max_prompt_words',
        :'esrgan_tile' => :'ESRGAN_tile',
        :'esrgan_tile_overlap' => :'ESRGAN_tile_overlap',
        :'realesrgan_enabled_models' => :'realesrgan_enabled_models',
        :'upscaler_for_img2img' => :'upscaler_for_img2img',
        :'face_restoration_model' => :'face_restoration_model',
        :'code_former_weight' => :'code_former_weight',
        :'face_restoration_unload' => :'face_restoration_unload',
        :'show_warnings' => :'show_warnings',
        :'memmon_poll_rate' => :'memmon_poll_rate',
        :'samples_log_stdout' => :'samples_log_stdout',
        :'multiple_tqdm' => :'multiple_tqdm',
        :'print_hypernet_extra' => :'print_hypernet_extra',
        :'list_hidden_files' => :'list_hidden_files',
        :'disable_mmap_load_safetensors' => :'disable_mmap_load_safetensors',
        :'unload_models_when_training' => :'unload_models_when_training',
        :'pin_memory' => :'pin_memory',
        :'save_optimizer_state' => :'save_optimizer_state',
        :'save_training_settings_to_txt' => :'save_training_settings_to_txt',
        :'dataset_filename_word_regex' => :'dataset_filename_word_regex',
        :'dataset_filename_join_string' => :'dataset_filename_join_string',
        :'training_image_repeats_per_epoch' => :'training_image_repeats_per_epoch',
        :'training_write_csv_every' => :'training_write_csv_every',
        :'training_xattention_optimizations' => :'training_xattention_optimizations',
        :'training_enable_tensorboard' => :'training_enable_tensorboard',
        :'training_tensorboard_save_images' => :'training_tensorboard_save_images',
        :'training_tensorboard_flush_every' => :'training_tensorboard_flush_every',
        :'sd_model_checkpoint' => :'sd_model_checkpoint',
        :'sd_checkpoint_cache' => :'sd_checkpoint_cache',
        :'sd_vae_checkpoint_cache' => :'sd_vae_checkpoint_cache',
        :'sd_vae' => :'sd_vae',
        :'sd_vae_as_default' => :'sd_vae_as_default',
        :'sd_unet' => :'sd_unet',
        :'inpainting_mask_weight' => :'inpainting_mask_weight',
        :'initial_noise_multiplier' => :'initial_noise_multiplier',
        :'img2img_color_correction' => :'img2img_color_correction',
        :'img2img_fix_steps' => :'img2img_fix_steps',
        :'img2img_background_color' => :'img2img_background_color',
        :'enable_quantization' => :'enable_quantization',
        :'enable_emphasis' => :'enable_emphasis',
        :'enable_batch_seeds' => :'enable_batch_seeds',
        :'comma_padding_backtrack' => :'comma_padding_backtrack',
        :'clip_stop_at_last_layers' => :'CLIP_stop_at_last_layers',
        :'upcast_attn' => :'upcast_attn',
        :'auto_vae_precision' => :'auto_vae_precision',
        :'randn_source' => :'randn_source',
        :'sdxl_crop_top' => :'sdxl_crop_top',
        :'sdxl_crop_left' => :'sdxl_crop_left',
        :'sdxl_refiner_low_aesthetic_score' => :'sdxl_refiner_low_aesthetic_score',
        :'sdxl_refiner_high_aesthetic_score' => :'sdxl_refiner_high_aesthetic_score',
        :'cross_attention_optimization' => :'cross_attention_optimization',
        :'s_min_uncond' => :'s_min_uncond',
        :'token_merging_ratio' => :'token_merging_ratio',
        :'token_merging_ratio_img2img' => :'token_merging_ratio_img2img',
        :'token_merging_ratio_hr' => :'token_merging_ratio_hr',
        :'pad_cond_uncond' => :'pad_cond_uncond',
        :'experimental_persistent_cond_cache' => :'experimental_persistent_cond_cache',
        :'use_old_emphasis_implementation' => :'use_old_emphasis_implementation',
        :'use_old_karras_scheduler_sigmas' => :'use_old_karras_scheduler_sigmas',
        :'no_dpmpp_sde_batch_determinism' => :'no_dpmpp_sde_batch_determinism',
        :'use_old_hires_fix_width_height' => :'use_old_hires_fix_width_height',
        :'dont_fix_second_order_samplers_schedule' => :'dont_fix_second_order_samplers_schedule',
        :'hires_fix_use_firstpass_conds' => :'hires_fix_use_firstpass_conds',
        :'interrogate_keep_models_in_memory' => :'interrogate_keep_models_in_memory',
        :'interrogate_return_ranks' => :'interrogate_return_ranks',
        :'interrogate_clip_num_beams' => :'interrogate_clip_num_beams',
        :'interrogate_clip_min_length' => :'interrogate_clip_min_length',
        :'interrogate_clip_max_length' => :'interrogate_clip_max_length',
        :'interrogate_clip_dict_limit' => :'interrogate_clip_dict_limit',
        :'interrogate_clip_skip_categories' => :'interrogate_clip_skip_categories',
        :'interrogate_deepbooru_score_threshold' => :'interrogate_deepbooru_score_threshold',
        :'deepbooru_sort_alpha' => :'deepbooru_sort_alpha',
        :'deepbooru_use_spaces' => :'deepbooru_use_spaces',
        :'deepbooru_escape' => :'deepbooru_escape',
        :'deepbooru_filter_tags' => :'deepbooru_filter_tags',
        :'extra_networks_show_hidden_directories' => :'extra_networks_show_hidden_directories',
        :'extra_networks_hidden_models' => :'extra_networks_hidden_models',
        :'extra_networks_default_multiplier' => :'extra_networks_default_multiplier',
        :'extra_networks_card_width' => :'extra_networks_card_width',
        :'extra_networks_card_height' => :'extra_networks_card_height',
        :'extra_networks_card_text_scale' => :'extra_networks_card_text_scale',
        :'extra_networks_card_show_desc' => :'extra_networks_card_show_desc',
        :'extra_networks_add_text_separator' => :'extra_networks_add_text_separator',
        :'ui_extra_networks_tab_reorder' => :'ui_extra_networks_tab_reorder',
        :'textual_inversion_print_at_load' => :'textual_inversion_print_at_load',
        :'textual_inversion_add_hashes_to_infotext' => :'textual_inversion_add_hashes_to_infotext',
        :'sd_hypernetwork' => :'sd_hypernetwork',
        :'localization' => :'localization',
        :'gradio_theme' => :'gradio_theme',
        :'img2img_editor_height' => :'img2img_editor_height',
        :'return_grid' => :'return_grid',
        :'return_mask' => :'return_mask',
        :'return_mask_composite' => :'return_mask_composite',
        :'do_not_show_images' => :'do_not_show_images',
        :'send_seed' => :'send_seed',
        :'send_size' => :'send_size',
        :'js_modal_lightbox' => :'js_modal_lightbox',
        :'js_modal_lightbox_initially_zoomed' => :'js_modal_lightbox_initially_zoomed',
        :'js_modal_lightbox_gamepad' => :'js_modal_lightbox_gamepad',
        :'js_modal_lightbox_gamepad_repeat' => :'js_modal_lightbox_gamepad_repeat',
        :'show_progress_in_title' => :'show_progress_in_title',
        :'samplers_in_dropdown' => :'samplers_in_dropdown',
        :'dimensions_and_batch_together' => :'dimensions_and_batch_together',
        :'keyedit_precision_attention' => :'keyedit_precision_attention',
        :'keyedit_precision_extra' => :'keyedit_precision_extra',
        :'keyedit_delimiters' => :'keyedit_delimiters',
        :'keyedit_move' => :'keyedit_move',
        :'quicksettings_list' => :'quicksettings_list',
        :'ui_tab_order' => :'ui_tab_order',
        :'hidden_tabs' => :'hidden_tabs',
        :'ui_reorder_list' => :'ui_reorder_list',
        :'hires_fix_show_sampler' => :'hires_fix_show_sampler',
        :'hires_fix_show_prompts' => :'hires_fix_show_prompts',
        :'disable_token_counters' => :'disable_token_counters',
        :'add_model_hash_to_info' => :'add_model_hash_to_info',
        :'add_model_name_to_info' => :'add_model_name_to_info',
        :'add_user_name_to_info' => :'add_user_name_to_info',
        :'add_version_to_infotext' => :'add_version_to_infotext',
        :'disable_weights_auto_swap' => :'disable_weights_auto_swap',
        :'infotext_styles' => :'infotext_styles',
        :'show_progressbar' => :'show_progressbar',
        :'live_previews_enable' => :'live_previews_enable',
        :'live_previews_image_format' => :'live_previews_image_format',
        :'show_progress_grid' => :'show_progress_grid',
        :'show_progress_every_n_steps' => :'show_progress_every_n_steps',
        :'show_progress_type' => :'show_progress_type',
        :'live_preview_content' => :'live_preview_content',
        :'live_preview_refresh_period' => :'live_preview_refresh_period',
        :'hide_samplers' => :'hide_samplers',
        :'eta_ddim' => :'eta_ddim',
        :'eta_ancestral' => :'eta_ancestral',
        :'ddim_discretize' => :'ddim_discretize',
        :'s_churn' => :'s_churn',
        :'s_tmin' => :'s_tmin',
        :'s_noise' => :'s_noise',
        :'k_sched_type' => :'k_sched_type',
        :'sigma_min' => :'sigma_min',
        :'sigma_max' => :'sigma_max',
        :'rho' => :'rho',
        :'eta_noise_seed_delta' => :'eta_noise_seed_delta',
        :'always_discard_next_to_last_sigma' => :'always_discard_next_to_last_sigma',
        :'uni_pc_variant' => :'uni_pc_variant',
        :'uni_pc_skip_type' => :'uni_pc_skip_type',
        :'uni_pc_order' => :'uni_pc_order',
        :'uni_pc_lower_order_final' => :'uni_pc_lower_order_final',
        :'postprocessing_enable_in_main_ui' => :'postprocessing_enable_in_main_ui',
        :'postprocessing_operation_order' => :'postprocessing_operation_order',
        :'upscaling_max_images_in_cache' => :'upscaling_max_images_in_cache',
        :'disabled_extensions' => :'disabled_extensions',
        :'disable_all_extensions' => :'disable_all_extensions',
        :'restore_config_state_file' => :'restore_config_state_file',
        :'sd_checkpoint_hash' => :'sd_checkpoint_hash',
        :'sd_lora' => :'sd_lora',
        :'lora_preferred_name' => :'lora_preferred_name',
        :'lora_add_hashes_to_infotext' => :'lora_add_hashes_to_infotext',
        :'lora_show_all' => :'lora_show_all',
        :'lora_hide_unknown_for_versions' => :'lora_hide_unknown_for_versions',
        :'lora_functional' => :'lora_functional',
        :'canvas_hotkey_zoom' => :'canvas_hotkey_zoom',
        :'canvas_hotkey_adjust' => :'canvas_hotkey_adjust',
        :'canvas_hotkey_move' => :'canvas_hotkey_move',
        :'canvas_hotkey_fullscreen' => :'canvas_hotkey_fullscreen',
        :'canvas_hotkey_reset' => :'canvas_hotkey_reset',
        :'canvas_hotkey_overlap' => :'canvas_hotkey_overlap',
        :'canvas_show_tooltip' => :'canvas_show_tooltip',
        :'canvas_blur_prompt' => :'canvas_blur_prompt',
        :'canvas_disabled_functions' => :'canvas_disabled_functions',
        :'extra_options' => :'extra_options',
        :'extra_options_accordion' => :'extra_options_accordion'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'samples_save' => :'Object',
        :'samples_format' => :'Object',
        :'samples_filename_pattern' => :'Object',
        :'save_images_add_number' => :'Object',
        :'grid_save' => :'Object',
        :'grid_format' => :'Object',
        :'grid_extended_filename' => :'Object',
        :'grid_only_if_multiple' => :'Object',
        :'grid_prevent_empty_spots' => :'Object',
        :'grid_zip_filename_pattern' => :'Object',
        :'n_rows' => :'Object',
        :'font' => :'Object',
        :'grid_text_active_color' => :'Object',
        :'grid_text_inactive_color' => :'Object',
        :'grid_background_color' => :'Object',
        :'enable_pnginfo' => :'Object',
        :'save_txt' => :'Object',
        :'save_images_before_face_restoration' => :'Object',
        :'save_images_before_highres_fix' => :'Object',
        :'save_images_before_color_correction' => :'Object',
        :'save_mask' => :'Object',
        :'save_mask_composite' => :'Object',
        :'jpeg_quality' => :'Object',
        :'webp_lossless' => :'Object',
        :'export_for_4chan' => :'Object',
        :'img_downscale_threshold' => :'Object',
        :'target_side_length' => :'Object',
        :'img_max_size_mp' => :'Object',
        :'use_original_name_batch' => :'Object',
        :'use_upscaler_name_as_suffix' => :'Object',
        :'save_selected_only' => :'Object',
        :'save_init_img' => :'Object',
        :'temp_dir' => :'Object',
        :'clean_temp_dir_at_start' => :'Object',
        :'outdir_samples' => :'Object',
        :'outdir_txt2img_samples' => :'Object',
        :'outdir_img2img_samples' => :'Object',
        :'outdir_extras_samples' => :'Object',
        :'outdir_grids' => :'Object',
        :'outdir_txt2img_grids' => :'Object',
        :'outdir_img2img_grids' => :'Object',
        :'outdir_save' => :'Object',
        :'outdir_init_images' => :'Object',
        :'save_to_dirs' => :'Object',
        :'grid_save_to_dirs' => :'Object',
        :'use_save_to_dirs_for_ui' => :'Object',
        :'directories_filename_pattern' => :'Object',
        :'directories_max_prompt_words' => :'Object',
        :'esrgan_tile' => :'Object',
        :'esrgan_tile_overlap' => :'Object',
        :'realesrgan_enabled_models' => :'Object',
        :'upscaler_for_img2img' => :'Object',
        :'face_restoration_model' => :'Object',
        :'code_former_weight' => :'Object',
        :'face_restoration_unload' => :'Object',
        :'show_warnings' => :'Object',
        :'memmon_poll_rate' => :'Object',
        :'samples_log_stdout' => :'Object',
        :'multiple_tqdm' => :'Object',
        :'print_hypernet_extra' => :'Object',
        :'list_hidden_files' => :'Object',
        :'disable_mmap_load_safetensors' => :'Object',
        :'unload_models_when_training' => :'Object',
        :'pin_memory' => :'Object',
        :'save_optimizer_state' => :'Object',
        :'save_training_settings_to_txt' => :'Object',
        :'dataset_filename_word_regex' => :'Object',
        :'dataset_filename_join_string' => :'Object',
        :'training_image_repeats_per_epoch' => :'Object',
        :'training_write_csv_every' => :'Object',
        :'training_xattention_optimizations' => :'Object',
        :'training_enable_tensorboard' => :'Object',
        :'training_tensorboard_save_images' => :'Object',
        :'training_tensorboard_flush_every' => :'Object',
        :'sd_model_checkpoint' => :'Object',
        :'sd_checkpoint_cache' => :'Object',
        :'sd_vae_checkpoint_cache' => :'Object',
        :'sd_vae' => :'Object',
        :'sd_vae_as_default' => :'Object',
        :'sd_unet' => :'Object',
        :'inpainting_mask_weight' => :'Object',
        :'initial_noise_multiplier' => :'Object',
        :'img2img_color_correction' => :'Object',
        :'img2img_fix_steps' => :'Object',
        :'img2img_background_color' => :'Object',
        :'enable_quantization' => :'Object',
        :'enable_emphasis' => :'Object',
        :'enable_batch_seeds' => :'Object',
        :'comma_padding_backtrack' => :'Object',
        :'clip_stop_at_last_layers' => :'Object',
        :'upcast_attn' => :'Object',
        :'auto_vae_precision' => :'Object',
        :'randn_source' => :'Object',
        :'sdxl_crop_top' => :'Object',
        :'sdxl_crop_left' => :'Object',
        :'sdxl_refiner_low_aesthetic_score' => :'Object',
        :'sdxl_refiner_high_aesthetic_score' => :'Object',
        :'cross_attention_optimization' => :'Object',
        :'s_min_uncond' => :'Object',
        :'token_merging_ratio' => :'Object',
        :'token_merging_ratio_img2img' => :'Object',
        :'token_merging_ratio_hr' => :'Object',
        :'pad_cond_uncond' => :'Object',
        :'experimental_persistent_cond_cache' => :'Object',
        :'use_old_emphasis_implementation' => :'Object',
        :'use_old_karras_scheduler_sigmas' => :'Object',
        :'no_dpmpp_sde_batch_determinism' => :'Object',
        :'use_old_hires_fix_width_height' => :'Object',
        :'dont_fix_second_order_samplers_schedule' => :'Object',
        :'hires_fix_use_firstpass_conds' => :'Object',
        :'interrogate_keep_models_in_memory' => :'Object',
        :'interrogate_return_ranks' => :'Object',
        :'interrogate_clip_num_beams' => :'Object',
        :'interrogate_clip_min_length' => :'Object',
        :'interrogate_clip_max_length' => :'Object',
        :'interrogate_clip_dict_limit' => :'Object',
        :'interrogate_clip_skip_categories' => :'Object',
        :'interrogate_deepbooru_score_threshold' => :'Object',
        :'deepbooru_sort_alpha' => :'Object',
        :'deepbooru_use_spaces' => :'Object',
        :'deepbooru_escape' => :'Object',
        :'deepbooru_filter_tags' => :'Object',
        :'extra_networks_show_hidden_directories' => :'Object',
        :'extra_networks_hidden_models' => :'Object',
        :'extra_networks_default_multiplier' => :'Object',
        :'extra_networks_card_width' => :'Object',
        :'extra_networks_card_height' => :'Object',
        :'extra_networks_card_text_scale' => :'Object',
        :'extra_networks_card_show_desc' => :'Object',
        :'extra_networks_add_text_separator' => :'Object',
        :'ui_extra_networks_tab_reorder' => :'Object',
        :'textual_inversion_print_at_load' => :'Object',
        :'textual_inversion_add_hashes_to_infotext' => :'Object',
        :'sd_hypernetwork' => :'Object',
        :'localization' => :'Object',
        :'gradio_theme' => :'Object',
        :'img2img_editor_height' => :'Object',
        :'return_grid' => :'Object',
        :'return_mask' => :'Object',
        :'return_mask_composite' => :'Object',
        :'do_not_show_images' => :'Object',
        :'send_seed' => :'Object',
        :'send_size' => :'Object',
        :'js_modal_lightbox' => :'Object',
        :'js_modal_lightbox_initially_zoomed' => :'Object',
        :'js_modal_lightbox_gamepad' => :'Object',
        :'js_modal_lightbox_gamepad_repeat' => :'Object',
        :'show_progress_in_title' => :'Object',
        :'samplers_in_dropdown' => :'Object',
        :'dimensions_and_batch_together' => :'Object',
        :'keyedit_precision_attention' => :'Object',
        :'keyedit_precision_extra' => :'Object',
        :'keyedit_delimiters' => :'Object',
        :'keyedit_move' => :'Object',
        :'quicksettings_list' => :'Object',
        :'ui_tab_order' => :'Object',
        :'hidden_tabs' => :'Object',
        :'ui_reorder_list' => :'Object',
        :'hires_fix_show_sampler' => :'Object',
        :'hires_fix_show_prompts' => :'Object',
        :'disable_token_counters' => :'Object',
        :'add_model_hash_to_info' => :'Object',
        :'add_model_name_to_info' => :'Object',
        :'add_user_name_to_info' => :'Object',
        :'add_version_to_infotext' => :'Object',
        :'disable_weights_auto_swap' => :'Object',
        :'infotext_styles' => :'Object',
        :'show_progressbar' => :'Object',
        :'live_previews_enable' => :'Object',
        :'live_previews_image_format' => :'Object',
        :'show_progress_grid' => :'Object',
        :'show_progress_every_n_steps' => :'Object',
        :'show_progress_type' => :'Object',
        :'live_preview_content' => :'Object',
        :'live_preview_refresh_period' => :'Object',
        :'hide_samplers' => :'Object',
        :'eta_ddim' => :'Object',
        :'eta_ancestral' => :'Object',
        :'ddim_discretize' => :'Object',
        :'s_churn' => :'Object',
        :'s_tmin' => :'Object',
        :'s_noise' => :'Object',
        :'k_sched_type' => :'Object',
        :'sigma_min' => :'Object',
        :'sigma_max' => :'Object',
        :'rho' => :'Object',
        :'eta_noise_seed_delta' => :'Object',
        :'always_discard_next_to_last_sigma' => :'Object',
        :'uni_pc_variant' => :'Object',
        :'uni_pc_skip_type' => :'Object',
        :'uni_pc_order' => :'Object',
        :'uni_pc_lower_order_final' => :'Object',
        :'postprocessing_enable_in_main_ui' => :'Object',
        :'postprocessing_operation_order' => :'Object',
        :'upscaling_max_images_in_cache' => :'Object',
        :'disabled_extensions' => :'Object',
        :'disable_all_extensions' => :'Object',
        :'restore_config_state_file' => :'Object',
        :'sd_checkpoint_hash' => :'Object',
        :'sd_lora' => :'Object',
        :'lora_preferred_name' => :'Object',
        :'lora_add_hashes_to_infotext' => :'Object',
        :'lora_show_all' => :'Object',
        :'lora_hide_unknown_for_versions' => :'Object',
        :'lora_functional' => :'Object',
        :'canvas_hotkey_zoom' => :'Object',
        :'canvas_hotkey_adjust' => :'Object',
        :'canvas_hotkey_move' => :'Object',
        :'canvas_hotkey_fullscreen' => :'Object',
        :'canvas_hotkey_reset' => :'Object',
        :'canvas_hotkey_overlap' => :'Object',
        :'canvas_show_tooltip' => :'Object',
        :'canvas_blur_prompt' => :'Object',
        :'canvas_disabled_functions' => :'Object',
        :'extra_options' => :'Object',
        :'extra_options_accordion' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Rauto1111AI::Options` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Rauto1111AI::Options`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'samples_save')
        self.samples_save = attributes[:'samples_save']
      else
        self.samples_save = true
      end

      if attributes.key?(:'samples_format')
        self.samples_format = attributes[:'samples_format']
      else
        self.samples_format = 'png'
      end

      if attributes.key?(:'samples_filename_pattern')
        self.samples_filename_pattern = attributes[:'samples_filename_pattern']
      end

      if attributes.key?(:'save_images_add_number')
        self.save_images_add_number = attributes[:'save_images_add_number']
      else
        self.save_images_add_number = true
      end

      if attributes.key?(:'grid_save')
        self.grid_save = attributes[:'grid_save']
      else
        self.grid_save = true
      end

      if attributes.key?(:'grid_format')
        self.grid_format = attributes[:'grid_format']
      else
        self.grid_format = 'png'
      end

      if attributes.key?(:'grid_extended_filename')
        self.grid_extended_filename = attributes[:'grid_extended_filename']
      end

      if attributes.key?(:'grid_only_if_multiple')
        self.grid_only_if_multiple = attributes[:'grid_only_if_multiple']
      else
        self.grid_only_if_multiple = true
      end

      if attributes.key?(:'grid_prevent_empty_spots')
        self.grid_prevent_empty_spots = attributes[:'grid_prevent_empty_spots']
      end

      if attributes.key?(:'grid_zip_filename_pattern')
        self.grid_zip_filename_pattern = attributes[:'grid_zip_filename_pattern']
      end

      if attributes.key?(:'n_rows')
        self.n_rows = attributes[:'n_rows']
      else
        self.n_rows = -1
      end

      if attributes.key?(:'font')
        self.font = attributes[:'font']
      end

      if attributes.key?(:'grid_text_active_color')
        self.grid_text_active_color = attributes[:'grid_text_active_color']
      else
        self.grid_text_active_color = '#000000'
      end

      if attributes.key?(:'grid_text_inactive_color')
        self.grid_text_inactive_color = attributes[:'grid_text_inactive_color']
      else
        self.grid_text_inactive_color = '#999999'
      end

      if attributes.key?(:'grid_background_color')
        self.grid_background_color = attributes[:'grid_background_color']
      else
        self.grid_background_color = '#ffffff'
      end

      if attributes.key?(:'enable_pnginfo')
        self.enable_pnginfo = attributes[:'enable_pnginfo']
      else
        self.enable_pnginfo = true
      end

      if attributes.key?(:'save_txt')
        self.save_txt = attributes[:'save_txt']
      end

      if attributes.key?(:'save_images_before_face_restoration')
        self.save_images_before_face_restoration = attributes[:'save_images_before_face_restoration']
      end

      if attributes.key?(:'save_images_before_highres_fix')
        self.save_images_before_highres_fix = attributes[:'save_images_before_highres_fix']
      end

      if attributes.key?(:'save_images_before_color_correction')
        self.save_images_before_color_correction = attributes[:'save_images_before_color_correction']
      end

      if attributes.key?(:'save_mask')
        self.save_mask = attributes[:'save_mask']
      end

      if attributes.key?(:'save_mask_composite')
        self.save_mask_composite = attributes[:'save_mask_composite']
      end

      if attributes.key?(:'jpeg_quality')
        self.jpeg_quality = attributes[:'jpeg_quality']
      else
        self.jpeg_quality = 80
      end

      if attributes.key?(:'webp_lossless')
        self.webp_lossless = attributes[:'webp_lossless']
      end

      if attributes.key?(:'export_for_4chan')
        self.export_for_4chan = attributes[:'export_for_4chan']
      else
        self.export_for_4chan = true
      end

      if attributes.key?(:'img_downscale_threshold')
        self.img_downscale_threshold = attributes[:'img_downscale_threshold']
      else
        self.img_downscale_threshold = 4.0
      end

      if attributes.key?(:'target_side_length')
        self.target_side_length = attributes[:'target_side_length']
      else
        self.target_side_length = 4000
      end

      if attributes.key?(:'img_max_size_mp')
        self.img_max_size_mp = attributes[:'img_max_size_mp']
      else
        self.img_max_size_mp = 200
      end

      if attributes.key?(:'use_original_name_batch')
        self.use_original_name_batch = attributes[:'use_original_name_batch']
      else
        self.use_original_name_batch = true
      end

      if attributes.key?(:'use_upscaler_name_as_suffix')
        self.use_upscaler_name_as_suffix = attributes[:'use_upscaler_name_as_suffix']
      end

      if attributes.key?(:'save_selected_only')
        self.save_selected_only = attributes[:'save_selected_only']
      else
        self.save_selected_only = true
      end

      if attributes.key?(:'save_init_img')
        self.save_init_img = attributes[:'save_init_img']
      end

      if attributes.key?(:'temp_dir')
        self.temp_dir = attributes[:'temp_dir']
      end

      if attributes.key?(:'clean_temp_dir_at_start')
        self.clean_temp_dir_at_start = attributes[:'clean_temp_dir_at_start']
      end

      if attributes.key?(:'outdir_samples')
        self.outdir_samples = attributes[:'outdir_samples']
      end

      if attributes.key?(:'outdir_txt2img_samples')
        self.outdir_txt2img_samples = attributes[:'outdir_txt2img_samples']
      else
        self.outdir_txt2img_samples = 'outputs/txt2img-images'
      end

      if attributes.key?(:'outdir_img2img_samples')
        self.outdir_img2img_samples = attributes[:'outdir_img2img_samples']
      else
        self.outdir_img2img_samples = 'outputs/img2img-images'
      end

      if attributes.key?(:'outdir_extras_samples')
        self.outdir_extras_samples = attributes[:'outdir_extras_samples']
      else
        self.outdir_extras_samples = 'outputs/extras-images'
      end

      if attributes.key?(:'outdir_grids')
        self.outdir_grids = attributes[:'outdir_grids']
      end

      if attributes.key?(:'outdir_txt2img_grids')
        self.outdir_txt2img_grids = attributes[:'outdir_txt2img_grids']
      else
        self.outdir_txt2img_grids = 'outputs/txt2img-grids'
      end

      if attributes.key?(:'outdir_img2img_grids')
        self.outdir_img2img_grids = attributes[:'outdir_img2img_grids']
      else
        self.outdir_img2img_grids = 'outputs/img2img-grids'
      end

      if attributes.key?(:'outdir_save')
        self.outdir_save = attributes[:'outdir_save']
      else
        self.outdir_save = 'log/images'
      end

      if attributes.key?(:'outdir_init_images')
        self.outdir_init_images = attributes[:'outdir_init_images']
      else
        self.outdir_init_images = 'outputs/init-images'
      end

      if attributes.key?(:'save_to_dirs')
        self.save_to_dirs = attributes[:'save_to_dirs']
      else
        self.save_to_dirs = true
      end

      if attributes.key?(:'grid_save_to_dirs')
        self.grid_save_to_dirs = attributes[:'grid_save_to_dirs']
      else
        self.grid_save_to_dirs = true
      end

      if attributes.key?(:'use_save_to_dirs_for_ui')
        self.use_save_to_dirs_for_ui = attributes[:'use_save_to_dirs_for_ui']
      end

      if attributes.key?(:'directories_filename_pattern')
        self.directories_filename_pattern = attributes[:'directories_filename_pattern']
      else
        self.directories_filename_pattern = '[date]'
      end

      if attributes.key?(:'directories_max_prompt_words')
        self.directories_max_prompt_words = attributes[:'directories_max_prompt_words']
      else
        self.directories_max_prompt_words = 8
      end

      if attributes.key?(:'esrgan_tile')
        self.esrgan_tile = attributes[:'esrgan_tile']
      else
        self.esrgan_tile = 192
      end

      if attributes.key?(:'esrgan_tile_overlap')
        self.esrgan_tile_overlap = attributes[:'esrgan_tile_overlap']
      else
        self.esrgan_tile_overlap = 8
      end

      if attributes.key?(:'realesrgan_enabled_models')
        if (value = attributes[:'realesrgan_enabled_models']).is_a?(Array)
          self.realesrgan_enabled_models = value
        end
      end

      if attributes.key?(:'upscaler_for_img2img')
        self.upscaler_for_img2img = attributes[:'upscaler_for_img2img']
      end

      if attributes.key?(:'face_restoration_model')
        self.face_restoration_model = attributes[:'face_restoration_model']
      else
        self.face_restoration_model = 'CodeFormer'
      end

      if attributes.key?(:'code_former_weight')
        self.code_former_weight = attributes[:'code_former_weight']
      else
        self.code_former_weight = 0.5
      end

      if attributes.key?(:'face_restoration_unload')
        self.face_restoration_unload = attributes[:'face_restoration_unload']
      end

      if attributes.key?(:'show_warnings')
        self.show_warnings = attributes[:'show_warnings']
      end

      if attributes.key?(:'memmon_poll_rate')
        self.memmon_poll_rate = attributes[:'memmon_poll_rate']
      else
        self.memmon_poll_rate = 8
      end

      if attributes.key?(:'samples_log_stdout')
        self.samples_log_stdout = attributes[:'samples_log_stdout']
      end

      if attributes.key?(:'multiple_tqdm')
        self.multiple_tqdm = attributes[:'multiple_tqdm']
      else
        self.multiple_tqdm = true
      end

      if attributes.key?(:'print_hypernet_extra')
        self.print_hypernet_extra = attributes[:'print_hypernet_extra']
      end

      if attributes.key?(:'list_hidden_files')
        self.list_hidden_files = attributes[:'list_hidden_files']
      else
        self.list_hidden_files = true
      end

      if attributes.key?(:'disable_mmap_load_safetensors')
        self.disable_mmap_load_safetensors = attributes[:'disable_mmap_load_safetensors']
      end

      if attributes.key?(:'unload_models_when_training')
        self.unload_models_when_training = attributes[:'unload_models_when_training']
      end

      if attributes.key?(:'pin_memory')
        self.pin_memory = attributes[:'pin_memory']
      end

      if attributes.key?(:'save_optimizer_state')
        self.save_optimizer_state = attributes[:'save_optimizer_state']
      end

      if attributes.key?(:'save_training_settings_to_txt')
        self.save_training_settings_to_txt = attributes[:'save_training_settings_to_txt']
      else
        self.save_training_settings_to_txt = true
      end

      if attributes.key?(:'dataset_filename_word_regex')
        self.dataset_filename_word_regex = attributes[:'dataset_filename_word_regex']
      end

      if attributes.key?(:'dataset_filename_join_string')
        self.dataset_filename_join_string = attributes[:'dataset_filename_join_string']
      else
        self.dataset_filename_join_string = ' '
      end

      if attributes.key?(:'training_image_repeats_per_epoch')
        self.training_image_repeats_per_epoch = attributes[:'training_image_repeats_per_epoch']
      else
        self.training_image_repeats_per_epoch = 1
      end

      if attributes.key?(:'training_write_csv_every')
        self.training_write_csv_every = attributes[:'training_write_csv_every']
      else
        self.training_write_csv_every = 500
      end

      if attributes.key?(:'training_xattention_optimizations')
        self.training_xattention_optimizations = attributes[:'training_xattention_optimizations']
      end

      if attributes.key?(:'training_enable_tensorboard')
        self.training_enable_tensorboard = attributes[:'training_enable_tensorboard']
      end

      if attributes.key?(:'training_tensorboard_save_images')
        self.training_tensorboard_save_images = attributes[:'training_tensorboard_save_images']
      end

      if attributes.key?(:'training_tensorboard_flush_every')
        self.training_tensorboard_flush_every = attributes[:'training_tensorboard_flush_every']
      else
        self.training_tensorboard_flush_every = 120
      end

      if attributes.key?(:'sd_model_checkpoint')
        self.sd_model_checkpoint = attributes[:'sd_model_checkpoint']
      end

      if attributes.key?(:'sd_checkpoint_cache')
        self.sd_checkpoint_cache = attributes[:'sd_checkpoint_cache']
      end

      if attributes.key?(:'sd_vae_checkpoint_cache')
        self.sd_vae_checkpoint_cache = attributes[:'sd_vae_checkpoint_cache']
      end

      if attributes.key?(:'sd_vae')
        self.sd_vae = attributes[:'sd_vae']
      else
        self.sd_vae = 'Automatic'
      end

      if attributes.key?(:'sd_vae_as_default')
        self.sd_vae_as_default = attributes[:'sd_vae_as_default']
      else
        self.sd_vae_as_default = true
      end

      if attributes.key?(:'sd_unet')
        self.sd_unet = attributes[:'sd_unet']
      else
        self.sd_unet = 'Automatic'
      end

      if attributes.key?(:'inpainting_mask_weight')
        self.inpainting_mask_weight = attributes[:'inpainting_mask_weight']
      else
        self.inpainting_mask_weight = 1.0
      end

      if attributes.key?(:'initial_noise_multiplier')
        self.initial_noise_multiplier = attributes[:'initial_noise_multiplier']
      else
        self.initial_noise_multiplier = 1.0
      end

      if attributes.key?(:'img2img_color_correction')
        self.img2img_color_correction = attributes[:'img2img_color_correction']
      end

      if attributes.key?(:'img2img_fix_steps')
        self.img2img_fix_steps = attributes[:'img2img_fix_steps']
      end

      if attributes.key?(:'img2img_background_color')
        self.img2img_background_color = attributes[:'img2img_background_color']
      else
        self.img2img_background_color = '#ffffff'
      end

      if attributes.key?(:'enable_quantization')
        self.enable_quantization = attributes[:'enable_quantization']
      end

      if attributes.key?(:'enable_emphasis')
        self.enable_emphasis = attributes[:'enable_emphasis']
      else
        self.enable_emphasis = true
      end

      if attributes.key?(:'enable_batch_seeds')
        self.enable_batch_seeds = attributes[:'enable_batch_seeds']
      else
        self.enable_batch_seeds = true
      end

      if attributes.key?(:'comma_padding_backtrack')
        self.comma_padding_backtrack = attributes[:'comma_padding_backtrack']
      else
        self.comma_padding_backtrack = 20
      end

      if attributes.key?(:'clip_stop_at_last_layers')
        self.clip_stop_at_last_layers = attributes[:'clip_stop_at_last_layers']
      else
        self.clip_stop_at_last_layers = 1
      end

      if attributes.key?(:'upcast_attn')
        self.upcast_attn = attributes[:'upcast_attn']
      end

      if attributes.key?(:'auto_vae_precision')
        self.auto_vae_precision = attributes[:'auto_vae_precision']
      else
        self.auto_vae_precision = true
      end

      if attributes.key?(:'randn_source')
        self.randn_source = attributes[:'randn_source']
      else
        self.randn_source = 'GPU'
      end

      if attributes.key?(:'sdxl_crop_top')
        self.sdxl_crop_top = attributes[:'sdxl_crop_top']
      end

      if attributes.key?(:'sdxl_crop_left')
        self.sdxl_crop_left = attributes[:'sdxl_crop_left']
      end

      if attributes.key?(:'sdxl_refiner_low_aesthetic_score')
        self.sdxl_refiner_low_aesthetic_score = attributes[:'sdxl_refiner_low_aesthetic_score']
      else
        self.sdxl_refiner_low_aesthetic_score = 2.5
      end

      if attributes.key?(:'sdxl_refiner_high_aesthetic_score')
        self.sdxl_refiner_high_aesthetic_score = attributes[:'sdxl_refiner_high_aesthetic_score']
      else
        self.sdxl_refiner_high_aesthetic_score = 6.0
      end

      if attributes.key?(:'cross_attention_optimization')
        self.cross_attention_optimization = attributes[:'cross_attention_optimization']
      else
        self.cross_attention_optimization = 'Automatic'
      end

      if attributes.key?(:'s_min_uncond')
        self.s_min_uncond = attributes[:'s_min_uncond']
      end

      if attributes.key?(:'token_merging_ratio')
        self.token_merging_ratio = attributes[:'token_merging_ratio']
      end

      if attributes.key?(:'token_merging_ratio_img2img')
        self.token_merging_ratio_img2img = attributes[:'token_merging_ratio_img2img']
      end

      if attributes.key?(:'token_merging_ratio_hr')
        self.token_merging_ratio_hr = attributes[:'token_merging_ratio_hr']
      end

      if attributes.key?(:'pad_cond_uncond')
        self.pad_cond_uncond = attributes[:'pad_cond_uncond']
      end

      if attributes.key?(:'experimental_persistent_cond_cache')
        self.experimental_persistent_cond_cache = attributes[:'experimental_persistent_cond_cache']
      end

      if attributes.key?(:'use_old_emphasis_implementation')
        self.use_old_emphasis_implementation = attributes[:'use_old_emphasis_implementation']
      end

      if attributes.key?(:'use_old_karras_scheduler_sigmas')
        self.use_old_karras_scheduler_sigmas = attributes[:'use_old_karras_scheduler_sigmas']
      end

      if attributes.key?(:'no_dpmpp_sde_batch_determinism')
        self.no_dpmpp_sde_batch_determinism = attributes[:'no_dpmpp_sde_batch_determinism']
      end

      if attributes.key?(:'use_old_hires_fix_width_height')
        self.use_old_hires_fix_width_height = attributes[:'use_old_hires_fix_width_height']
      end

      if attributes.key?(:'dont_fix_second_order_samplers_schedule')
        self.dont_fix_second_order_samplers_schedule = attributes[:'dont_fix_second_order_samplers_schedule']
      end

      if attributes.key?(:'hires_fix_use_firstpass_conds')
        self.hires_fix_use_firstpass_conds = attributes[:'hires_fix_use_firstpass_conds']
      end

      if attributes.key?(:'interrogate_keep_models_in_memory')
        self.interrogate_keep_models_in_memory = attributes[:'interrogate_keep_models_in_memory']
      end

      if attributes.key?(:'interrogate_return_ranks')
        self.interrogate_return_ranks = attributes[:'interrogate_return_ranks']
      end

      if attributes.key?(:'interrogate_clip_num_beams')
        self.interrogate_clip_num_beams = attributes[:'interrogate_clip_num_beams']
      else
        self.interrogate_clip_num_beams = 1
      end

      if attributes.key?(:'interrogate_clip_min_length')
        self.interrogate_clip_min_length = attributes[:'interrogate_clip_min_length']
      else
        self.interrogate_clip_min_length = 24
      end

      if attributes.key?(:'interrogate_clip_max_length')
        self.interrogate_clip_max_length = attributes[:'interrogate_clip_max_length']
      else
        self.interrogate_clip_max_length = 48
      end

      if attributes.key?(:'interrogate_clip_dict_limit')
        self.interrogate_clip_dict_limit = attributes[:'interrogate_clip_dict_limit']
      else
        self.interrogate_clip_dict_limit = 1500
      end

      if attributes.key?(:'interrogate_clip_skip_categories')
        self.interrogate_clip_skip_categories = attributes[:'interrogate_clip_skip_categories']
      end

      if attributes.key?(:'interrogate_deepbooru_score_threshold')
        self.interrogate_deepbooru_score_threshold = attributes[:'interrogate_deepbooru_score_threshold']
      else
        self.interrogate_deepbooru_score_threshold = 0.5
      end

      if attributes.key?(:'deepbooru_sort_alpha')
        self.deepbooru_sort_alpha = attributes[:'deepbooru_sort_alpha']
      else
        self.deepbooru_sort_alpha = true
      end

      if attributes.key?(:'deepbooru_use_spaces')
        self.deepbooru_use_spaces = attributes[:'deepbooru_use_spaces']
      else
        self.deepbooru_use_spaces = true
      end

      if attributes.key?(:'deepbooru_escape')
        self.deepbooru_escape = attributes[:'deepbooru_escape']
      else
        self.deepbooru_escape = true
      end

      if attributes.key?(:'deepbooru_filter_tags')
        self.deepbooru_filter_tags = attributes[:'deepbooru_filter_tags']
      end

      if attributes.key?(:'extra_networks_show_hidden_directories')
        self.extra_networks_show_hidden_directories = attributes[:'extra_networks_show_hidden_directories']
      else
        self.extra_networks_show_hidden_directories = true
      end

      if attributes.key?(:'extra_networks_hidden_models')
        self.extra_networks_hidden_models = attributes[:'extra_networks_hidden_models']
      else
        self.extra_networks_hidden_models = 'When searched'
      end

      if attributes.key?(:'extra_networks_default_multiplier')
        self.extra_networks_default_multiplier = attributes[:'extra_networks_default_multiplier']
      else
        self.extra_networks_default_multiplier = 1.0
      end

      if attributes.key?(:'extra_networks_card_width')
        self.extra_networks_card_width = attributes[:'extra_networks_card_width']
      end

      if attributes.key?(:'extra_networks_card_height')
        self.extra_networks_card_height = attributes[:'extra_networks_card_height']
      end

      if attributes.key?(:'extra_networks_card_text_scale')
        self.extra_networks_card_text_scale = attributes[:'extra_networks_card_text_scale']
      else
        self.extra_networks_card_text_scale = 1.0
      end

      if attributes.key?(:'extra_networks_card_show_desc')
        self.extra_networks_card_show_desc = attributes[:'extra_networks_card_show_desc']
      else
        self.extra_networks_card_show_desc = true
      end

      if attributes.key?(:'extra_networks_add_text_separator')
        self.extra_networks_add_text_separator = attributes[:'extra_networks_add_text_separator']
      else
        self.extra_networks_add_text_separator = ' '
      end

      if attributes.key?(:'ui_extra_networks_tab_reorder')
        self.ui_extra_networks_tab_reorder = attributes[:'ui_extra_networks_tab_reorder']
      end

      if attributes.key?(:'textual_inversion_print_at_load')
        self.textual_inversion_print_at_load = attributes[:'textual_inversion_print_at_load']
      end

      if attributes.key?(:'textual_inversion_add_hashes_to_infotext')
        self.textual_inversion_add_hashes_to_infotext = attributes[:'textual_inversion_add_hashes_to_infotext']
      else
        self.textual_inversion_add_hashes_to_infotext = true
      end

      if attributes.key?(:'sd_hypernetwork')
        self.sd_hypernetwork = attributes[:'sd_hypernetwork']
      else
        self.sd_hypernetwork = 'None'
      end

      if attributes.key?(:'localization')
        self.localization = attributes[:'localization']
      else
        self.localization = 'None'
      end

      if attributes.key?(:'gradio_theme')
        self.gradio_theme = attributes[:'gradio_theme']
      else
        self.gradio_theme = 'Default'
      end

      if attributes.key?(:'img2img_editor_height')
        self.img2img_editor_height = attributes[:'img2img_editor_height']
      else
        self.img2img_editor_height = 720
      end

      if attributes.key?(:'return_grid')
        self.return_grid = attributes[:'return_grid']
      else
        self.return_grid = true
      end

      if attributes.key?(:'return_mask')
        self.return_mask = attributes[:'return_mask']
      end

      if attributes.key?(:'return_mask_composite')
        self.return_mask_composite = attributes[:'return_mask_composite']
      end

      if attributes.key?(:'do_not_show_images')
        self.do_not_show_images = attributes[:'do_not_show_images']
      end

      if attributes.key?(:'send_seed')
        self.send_seed = attributes[:'send_seed']
      else
        self.send_seed = true
      end

      if attributes.key?(:'send_size')
        self.send_size = attributes[:'send_size']
      else
        self.send_size = true
      end

      if attributes.key?(:'js_modal_lightbox')
        self.js_modal_lightbox = attributes[:'js_modal_lightbox']
      else
        self.js_modal_lightbox = true
      end

      if attributes.key?(:'js_modal_lightbox_initially_zoomed')
        self.js_modal_lightbox_initially_zoomed = attributes[:'js_modal_lightbox_initially_zoomed']
      else
        self.js_modal_lightbox_initially_zoomed = true
      end

      if attributes.key?(:'js_modal_lightbox_gamepad')
        self.js_modal_lightbox_gamepad = attributes[:'js_modal_lightbox_gamepad']
      end

      if attributes.key?(:'js_modal_lightbox_gamepad_repeat')
        self.js_modal_lightbox_gamepad_repeat = attributes[:'js_modal_lightbox_gamepad_repeat']
      else
        self.js_modal_lightbox_gamepad_repeat = 250
      end

      if attributes.key?(:'show_progress_in_title')
        self.show_progress_in_title = attributes[:'show_progress_in_title']
      else
        self.show_progress_in_title = true
      end

      if attributes.key?(:'samplers_in_dropdown')
        self.samplers_in_dropdown = attributes[:'samplers_in_dropdown']
      else
        self.samplers_in_dropdown = true
      end

      if attributes.key?(:'dimensions_and_batch_together')
        self.dimensions_and_batch_together = attributes[:'dimensions_and_batch_together']
      else
        self.dimensions_and_batch_together = true
      end

      if attributes.key?(:'keyedit_precision_attention')
        self.keyedit_precision_attention = attributes[:'keyedit_precision_attention']
      else
        self.keyedit_precision_attention = 0.1
      end

      if attributes.key?(:'keyedit_precision_extra')
        self.keyedit_precision_extra = attributes[:'keyedit_precision_extra']
      else
        self.keyedit_precision_extra = 0.05
      end

      if attributes.key?(:'keyedit_delimiters')
        self.keyedit_delimiters = attributes[:'keyedit_delimiters']
      else
        self.keyedit_delimiters = '.,/!?%^*;:{}=`~()'
      end

      if attributes.key?(:'keyedit_move')
        self.keyedit_move = attributes[:'keyedit_move']
      else
        self.keyedit_move = true
      end

      if attributes.key?(:'quicksettings_list')
        if (value = attributes[:'quicksettings_list']).is_a?(Array)
          self.quicksettings_list = value
        end
      end

      if attributes.key?(:'ui_tab_order')
        self.ui_tab_order = attributes[:'ui_tab_order']
      end

      if attributes.key?(:'hidden_tabs')
        self.hidden_tabs = attributes[:'hidden_tabs']
      end

      if attributes.key?(:'ui_reorder_list')
        self.ui_reorder_list = attributes[:'ui_reorder_list']
      end

      if attributes.key?(:'hires_fix_show_sampler')
        self.hires_fix_show_sampler = attributes[:'hires_fix_show_sampler']
      end

      if attributes.key?(:'hires_fix_show_prompts')
        self.hires_fix_show_prompts = attributes[:'hires_fix_show_prompts']
      end

      if attributes.key?(:'disable_token_counters')
        self.disable_token_counters = attributes[:'disable_token_counters']
      end

      if attributes.key?(:'add_model_hash_to_info')
        self.add_model_hash_to_info = attributes[:'add_model_hash_to_info']
      else
        self.add_model_hash_to_info = true
      end

      if attributes.key?(:'add_model_name_to_info')
        self.add_model_name_to_info = attributes[:'add_model_name_to_info']
      else
        self.add_model_name_to_info = true
      end

      if attributes.key?(:'add_user_name_to_info')
        self.add_user_name_to_info = attributes[:'add_user_name_to_info']
      end

      if attributes.key?(:'add_version_to_infotext')
        self.add_version_to_infotext = attributes[:'add_version_to_infotext']
      else
        self.add_version_to_infotext = true
      end

      if attributes.key?(:'disable_weights_auto_swap')
        self.disable_weights_auto_swap = attributes[:'disable_weights_auto_swap']
      else
        self.disable_weights_auto_swap = true
      end

      if attributes.key?(:'infotext_styles')
        self.infotext_styles = attributes[:'infotext_styles']
      else
        self.infotext_styles = 'Apply if any'
      end

      if attributes.key?(:'show_progressbar')
        self.show_progressbar = attributes[:'show_progressbar']
      else
        self.show_progressbar = true
      end

      if attributes.key?(:'live_previews_enable')
        self.live_previews_enable = attributes[:'live_previews_enable']
      else
        self.live_previews_enable = true
      end

      if attributes.key?(:'live_previews_image_format')
        self.live_previews_image_format = attributes[:'live_previews_image_format']
      else
        self.live_previews_image_format = 'png'
      end

      if attributes.key?(:'show_progress_grid')
        self.show_progress_grid = attributes[:'show_progress_grid']
      else
        self.show_progress_grid = true
      end

      if attributes.key?(:'show_progress_every_n_steps')
        self.show_progress_every_n_steps = attributes[:'show_progress_every_n_steps']
      else
        self.show_progress_every_n_steps = 10
      end

      if attributes.key?(:'show_progress_type')
        self.show_progress_type = attributes[:'show_progress_type']
      else
        self.show_progress_type = 'Approx NN'
      end

      if attributes.key?(:'live_preview_content')
        self.live_preview_content = attributes[:'live_preview_content']
      else
        self.live_preview_content = 'Prompt'
      end

      if attributes.key?(:'live_preview_refresh_period')
        self.live_preview_refresh_period = attributes[:'live_preview_refresh_period']
      else
        self.live_preview_refresh_period = 1000
      end

      if attributes.key?(:'hide_samplers')
        self.hide_samplers = attributes[:'hide_samplers']
      end

      if attributes.key?(:'eta_ddim')
        self.eta_ddim = attributes[:'eta_ddim']
      end

      if attributes.key?(:'eta_ancestral')
        self.eta_ancestral = attributes[:'eta_ancestral']
      else
        self.eta_ancestral = 1.0
      end

      if attributes.key?(:'ddim_discretize')
        self.ddim_discretize = attributes[:'ddim_discretize']
      else
        self.ddim_discretize = 'uniform'
      end

      if attributes.key?(:'s_churn')
        self.s_churn = attributes[:'s_churn']
      end

      if attributes.key?(:'s_tmin')
        self.s_tmin = attributes[:'s_tmin']
      end

      if attributes.key?(:'s_noise')
        self.s_noise = attributes[:'s_noise']
      else
        self.s_noise = 1.0
      end

      if attributes.key?(:'k_sched_type')
        self.k_sched_type = attributes[:'k_sched_type']
      else
        self.k_sched_type = 'Automatic'
      end

      if attributes.key?(:'sigma_min')
        self.sigma_min = attributes[:'sigma_min']
      end

      if attributes.key?(:'sigma_max')
        self.sigma_max = attributes[:'sigma_max']
      end

      if attributes.key?(:'rho')
        self.rho = attributes[:'rho']
      end

      if attributes.key?(:'eta_noise_seed_delta')
        self.eta_noise_seed_delta = attributes[:'eta_noise_seed_delta']
      end

      if attributes.key?(:'always_discard_next_to_last_sigma')
        self.always_discard_next_to_last_sigma = attributes[:'always_discard_next_to_last_sigma']
      end

      if attributes.key?(:'uni_pc_variant')
        self.uni_pc_variant = attributes[:'uni_pc_variant']
      else
        self.uni_pc_variant = 'bh1'
      end

      if attributes.key?(:'uni_pc_skip_type')
        self.uni_pc_skip_type = attributes[:'uni_pc_skip_type']
      else
        self.uni_pc_skip_type = 'time_uniform'
      end

      if attributes.key?(:'uni_pc_order')
        self.uni_pc_order = attributes[:'uni_pc_order']
      else
        self.uni_pc_order = 3
      end

      if attributes.key?(:'uni_pc_lower_order_final')
        self.uni_pc_lower_order_final = attributes[:'uni_pc_lower_order_final']
      else
        self.uni_pc_lower_order_final = true
      end

      if attributes.key?(:'postprocessing_enable_in_main_ui')
        self.postprocessing_enable_in_main_ui = attributes[:'postprocessing_enable_in_main_ui']
      end

      if attributes.key?(:'postprocessing_operation_order')
        self.postprocessing_operation_order = attributes[:'postprocessing_operation_order']
      end

      if attributes.key?(:'upscaling_max_images_in_cache')
        self.upscaling_max_images_in_cache = attributes[:'upscaling_max_images_in_cache']
      else
        self.upscaling_max_images_in_cache = 5
      end

      if attributes.key?(:'disabled_extensions')
        self.disabled_extensions = attributes[:'disabled_extensions']
      end

      if attributes.key?(:'disable_all_extensions')
        self.disable_all_extensions = attributes[:'disable_all_extensions']
      else
        self.disable_all_extensions = 'none'
      end

      if attributes.key?(:'restore_config_state_file')
        self.restore_config_state_file = attributes[:'restore_config_state_file']
      end

      if attributes.key?(:'sd_checkpoint_hash')
        self.sd_checkpoint_hash = attributes[:'sd_checkpoint_hash']
      end

      if attributes.key?(:'sd_lora')
        self.sd_lora = attributes[:'sd_lora']
      else
        self.sd_lora = 'None'
      end

      if attributes.key?(:'lora_preferred_name')
        self.lora_preferred_name = attributes[:'lora_preferred_name']
      else
        self.lora_preferred_name = 'Alias from file'
      end

      if attributes.key?(:'lora_add_hashes_to_infotext')
        self.lora_add_hashes_to_infotext = attributes[:'lora_add_hashes_to_infotext']
      else
        self.lora_add_hashes_to_infotext = true
      end

      if attributes.key?(:'lora_show_all')
        self.lora_show_all = attributes[:'lora_show_all']
      end

      if attributes.key?(:'lora_hide_unknown_for_versions')
        self.lora_hide_unknown_for_versions = attributes[:'lora_hide_unknown_for_versions']
      end

      if attributes.key?(:'lora_functional')
        self.lora_functional = attributes[:'lora_functional']
      end

      if attributes.key?(:'canvas_hotkey_zoom')
        self.canvas_hotkey_zoom = attributes[:'canvas_hotkey_zoom']
      else
        self.canvas_hotkey_zoom = 'Alt'
      end

      if attributes.key?(:'canvas_hotkey_adjust')
        self.canvas_hotkey_adjust = attributes[:'canvas_hotkey_adjust']
      else
        self.canvas_hotkey_adjust = 'Ctrl'
      end

      if attributes.key?(:'canvas_hotkey_move')
        self.canvas_hotkey_move = attributes[:'canvas_hotkey_move']
      else
        self.canvas_hotkey_move = 'F'
      end

      if attributes.key?(:'canvas_hotkey_fullscreen')
        self.canvas_hotkey_fullscreen = attributes[:'canvas_hotkey_fullscreen']
      else
        self.canvas_hotkey_fullscreen = 'S'
      end

      if attributes.key?(:'canvas_hotkey_reset')
        self.canvas_hotkey_reset = attributes[:'canvas_hotkey_reset']
      else
        self.canvas_hotkey_reset = 'R'
      end

      if attributes.key?(:'canvas_hotkey_overlap')
        self.canvas_hotkey_overlap = attributes[:'canvas_hotkey_overlap']
      else
        self.canvas_hotkey_overlap = 'O'
      end

      if attributes.key?(:'canvas_show_tooltip')
        self.canvas_show_tooltip = attributes[:'canvas_show_tooltip']
      else
        self.canvas_show_tooltip = true
      end

      if attributes.key?(:'canvas_blur_prompt')
        self.canvas_blur_prompt = attributes[:'canvas_blur_prompt']
      end

      if attributes.key?(:'canvas_disabled_functions')
        if (value = attributes[:'canvas_disabled_functions']).is_a?(Array)
          self.canvas_disabled_functions = value
        end
      end

      if attributes.key?(:'extra_options')
        self.extra_options = attributes[:'extra_options']
      end

      if attributes.key?(:'extra_options_accordion')
        self.extra_options_accordion = attributes[:'extra_options_accordion']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          samples_save == o.samples_save &&
          samples_format == o.samples_format &&
          samples_filename_pattern == o.samples_filename_pattern &&
          save_images_add_number == o.save_images_add_number &&
          grid_save == o.grid_save &&
          grid_format == o.grid_format &&
          grid_extended_filename == o.grid_extended_filename &&
          grid_only_if_multiple == o.grid_only_if_multiple &&
          grid_prevent_empty_spots == o.grid_prevent_empty_spots &&
          grid_zip_filename_pattern == o.grid_zip_filename_pattern &&
          n_rows == o.n_rows &&
          font == o.font &&
          grid_text_active_color == o.grid_text_active_color &&
          grid_text_inactive_color == o.grid_text_inactive_color &&
          grid_background_color == o.grid_background_color &&
          enable_pnginfo == o.enable_pnginfo &&
          save_txt == o.save_txt &&
          save_images_before_face_restoration == o.save_images_before_face_restoration &&
          save_images_before_highres_fix == o.save_images_before_highres_fix &&
          save_images_before_color_correction == o.save_images_before_color_correction &&
          save_mask == o.save_mask &&
          save_mask_composite == o.save_mask_composite &&
          jpeg_quality == o.jpeg_quality &&
          webp_lossless == o.webp_lossless &&
          export_for_4chan == o.export_for_4chan &&
          img_downscale_threshold == o.img_downscale_threshold &&
          target_side_length == o.target_side_length &&
          img_max_size_mp == o.img_max_size_mp &&
          use_original_name_batch == o.use_original_name_batch &&
          use_upscaler_name_as_suffix == o.use_upscaler_name_as_suffix &&
          save_selected_only == o.save_selected_only &&
          save_init_img == o.save_init_img &&
          temp_dir == o.temp_dir &&
          clean_temp_dir_at_start == o.clean_temp_dir_at_start &&
          outdir_samples == o.outdir_samples &&
          outdir_txt2img_samples == o.outdir_txt2img_samples &&
          outdir_img2img_samples == o.outdir_img2img_samples &&
          outdir_extras_samples == o.outdir_extras_samples &&
          outdir_grids == o.outdir_grids &&
          outdir_txt2img_grids == o.outdir_txt2img_grids &&
          outdir_img2img_grids == o.outdir_img2img_grids &&
          outdir_save == o.outdir_save &&
          outdir_init_images == o.outdir_init_images &&
          save_to_dirs == o.save_to_dirs &&
          grid_save_to_dirs == o.grid_save_to_dirs &&
          use_save_to_dirs_for_ui == o.use_save_to_dirs_for_ui &&
          directories_filename_pattern == o.directories_filename_pattern &&
          directories_max_prompt_words == o.directories_max_prompt_words &&
          esrgan_tile == o.esrgan_tile &&
          esrgan_tile_overlap == o.esrgan_tile_overlap &&
          realesrgan_enabled_models == o.realesrgan_enabled_models &&
          upscaler_for_img2img == o.upscaler_for_img2img &&
          face_restoration_model == o.face_restoration_model &&
          code_former_weight == o.code_former_weight &&
          face_restoration_unload == o.face_restoration_unload &&
          show_warnings == o.show_warnings &&
          memmon_poll_rate == o.memmon_poll_rate &&
          samples_log_stdout == o.samples_log_stdout &&
          multiple_tqdm == o.multiple_tqdm &&
          print_hypernet_extra == o.print_hypernet_extra &&
          list_hidden_files == o.list_hidden_files &&
          disable_mmap_load_safetensors == o.disable_mmap_load_safetensors &&
          unload_models_when_training == o.unload_models_when_training &&
          pin_memory == o.pin_memory &&
          save_optimizer_state == o.save_optimizer_state &&
          save_training_settings_to_txt == o.save_training_settings_to_txt &&
          dataset_filename_word_regex == o.dataset_filename_word_regex &&
          dataset_filename_join_string == o.dataset_filename_join_string &&
          training_image_repeats_per_epoch == o.training_image_repeats_per_epoch &&
          training_write_csv_every == o.training_write_csv_every &&
          training_xattention_optimizations == o.training_xattention_optimizations &&
          training_enable_tensorboard == o.training_enable_tensorboard &&
          training_tensorboard_save_images == o.training_tensorboard_save_images &&
          training_tensorboard_flush_every == o.training_tensorboard_flush_every &&
          sd_model_checkpoint == o.sd_model_checkpoint &&
          sd_checkpoint_cache == o.sd_checkpoint_cache &&
          sd_vae_checkpoint_cache == o.sd_vae_checkpoint_cache &&
          sd_vae == o.sd_vae &&
          sd_vae_as_default == o.sd_vae_as_default &&
          sd_unet == o.sd_unet &&
          inpainting_mask_weight == o.inpainting_mask_weight &&
          initial_noise_multiplier == o.initial_noise_multiplier &&
          img2img_color_correction == o.img2img_color_correction &&
          img2img_fix_steps == o.img2img_fix_steps &&
          img2img_background_color == o.img2img_background_color &&
          enable_quantization == o.enable_quantization &&
          enable_emphasis == o.enable_emphasis &&
          enable_batch_seeds == o.enable_batch_seeds &&
          comma_padding_backtrack == o.comma_padding_backtrack &&
          clip_stop_at_last_layers == o.clip_stop_at_last_layers &&
          upcast_attn == o.upcast_attn &&
          auto_vae_precision == o.auto_vae_precision &&
          randn_source == o.randn_source &&
          sdxl_crop_top == o.sdxl_crop_top &&
          sdxl_crop_left == o.sdxl_crop_left &&
          sdxl_refiner_low_aesthetic_score == o.sdxl_refiner_low_aesthetic_score &&
          sdxl_refiner_high_aesthetic_score == o.sdxl_refiner_high_aesthetic_score &&
          cross_attention_optimization == o.cross_attention_optimization &&
          s_min_uncond == o.s_min_uncond &&
          token_merging_ratio == o.token_merging_ratio &&
          token_merging_ratio_img2img == o.token_merging_ratio_img2img &&
          token_merging_ratio_hr == o.token_merging_ratio_hr &&
          pad_cond_uncond == o.pad_cond_uncond &&
          experimental_persistent_cond_cache == o.experimental_persistent_cond_cache &&
          use_old_emphasis_implementation == o.use_old_emphasis_implementation &&
          use_old_karras_scheduler_sigmas == o.use_old_karras_scheduler_sigmas &&
          no_dpmpp_sde_batch_determinism == o.no_dpmpp_sde_batch_determinism &&
          use_old_hires_fix_width_height == o.use_old_hires_fix_width_height &&
          dont_fix_second_order_samplers_schedule == o.dont_fix_second_order_samplers_schedule &&
          hires_fix_use_firstpass_conds == o.hires_fix_use_firstpass_conds &&
          interrogate_keep_models_in_memory == o.interrogate_keep_models_in_memory &&
          interrogate_return_ranks == o.interrogate_return_ranks &&
          interrogate_clip_num_beams == o.interrogate_clip_num_beams &&
          interrogate_clip_min_length == o.interrogate_clip_min_length &&
          interrogate_clip_max_length == o.interrogate_clip_max_length &&
          interrogate_clip_dict_limit == o.interrogate_clip_dict_limit &&
          interrogate_clip_skip_categories == o.interrogate_clip_skip_categories &&
          interrogate_deepbooru_score_threshold == o.interrogate_deepbooru_score_threshold &&
          deepbooru_sort_alpha == o.deepbooru_sort_alpha &&
          deepbooru_use_spaces == o.deepbooru_use_spaces &&
          deepbooru_escape == o.deepbooru_escape &&
          deepbooru_filter_tags == o.deepbooru_filter_tags &&
          extra_networks_show_hidden_directories == o.extra_networks_show_hidden_directories &&
          extra_networks_hidden_models == o.extra_networks_hidden_models &&
          extra_networks_default_multiplier == o.extra_networks_default_multiplier &&
          extra_networks_card_width == o.extra_networks_card_width &&
          extra_networks_card_height == o.extra_networks_card_height &&
          extra_networks_card_text_scale == o.extra_networks_card_text_scale &&
          extra_networks_card_show_desc == o.extra_networks_card_show_desc &&
          extra_networks_add_text_separator == o.extra_networks_add_text_separator &&
          ui_extra_networks_tab_reorder == o.ui_extra_networks_tab_reorder &&
          textual_inversion_print_at_load == o.textual_inversion_print_at_load &&
          textual_inversion_add_hashes_to_infotext == o.textual_inversion_add_hashes_to_infotext &&
          sd_hypernetwork == o.sd_hypernetwork &&
          localization == o.localization &&
          gradio_theme == o.gradio_theme &&
          img2img_editor_height == o.img2img_editor_height &&
          return_grid == o.return_grid &&
          return_mask == o.return_mask &&
          return_mask_composite == o.return_mask_composite &&
          do_not_show_images == o.do_not_show_images &&
          send_seed == o.send_seed &&
          send_size == o.send_size &&
          js_modal_lightbox == o.js_modal_lightbox &&
          js_modal_lightbox_initially_zoomed == o.js_modal_lightbox_initially_zoomed &&
          js_modal_lightbox_gamepad == o.js_modal_lightbox_gamepad &&
          js_modal_lightbox_gamepad_repeat == o.js_modal_lightbox_gamepad_repeat &&
          show_progress_in_title == o.show_progress_in_title &&
          samplers_in_dropdown == o.samplers_in_dropdown &&
          dimensions_and_batch_together == o.dimensions_and_batch_together &&
          keyedit_precision_attention == o.keyedit_precision_attention &&
          keyedit_precision_extra == o.keyedit_precision_extra &&
          keyedit_delimiters == o.keyedit_delimiters &&
          keyedit_move == o.keyedit_move &&
          quicksettings_list == o.quicksettings_list &&
          ui_tab_order == o.ui_tab_order &&
          hidden_tabs == o.hidden_tabs &&
          ui_reorder_list == o.ui_reorder_list &&
          hires_fix_show_sampler == o.hires_fix_show_sampler &&
          hires_fix_show_prompts == o.hires_fix_show_prompts &&
          disable_token_counters == o.disable_token_counters &&
          add_model_hash_to_info == o.add_model_hash_to_info &&
          add_model_name_to_info == o.add_model_name_to_info &&
          add_user_name_to_info == o.add_user_name_to_info &&
          add_version_to_infotext == o.add_version_to_infotext &&
          disable_weights_auto_swap == o.disable_weights_auto_swap &&
          infotext_styles == o.infotext_styles &&
          show_progressbar == o.show_progressbar &&
          live_previews_enable == o.live_previews_enable &&
          live_previews_image_format == o.live_previews_image_format &&
          show_progress_grid == o.show_progress_grid &&
          show_progress_every_n_steps == o.show_progress_every_n_steps &&
          show_progress_type == o.show_progress_type &&
          live_preview_content == o.live_preview_content &&
          live_preview_refresh_period == o.live_preview_refresh_period &&
          hide_samplers == o.hide_samplers &&
          eta_ddim == o.eta_ddim &&
          eta_ancestral == o.eta_ancestral &&
          ddim_discretize == o.ddim_discretize &&
          s_churn == o.s_churn &&
          s_tmin == o.s_tmin &&
          s_noise == o.s_noise &&
          k_sched_type == o.k_sched_type &&
          sigma_min == o.sigma_min &&
          sigma_max == o.sigma_max &&
          rho == o.rho &&
          eta_noise_seed_delta == o.eta_noise_seed_delta &&
          always_discard_next_to_last_sigma == o.always_discard_next_to_last_sigma &&
          uni_pc_variant == o.uni_pc_variant &&
          uni_pc_skip_type == o.uni_pc_skip_type &&
          uni_pc_order == o.uni_pc_order &&
          uni_pc_lower_order_final == o.uni_pc_lower_order_final &&
          postprocessing_enable_in_main_ui == o.postprocessing_enable_in_main_ui &&
          postprocessing_operation_order == o.postprocessing_operation_order &&
          upscaling_max_images_in_cache == o.upscaling_max_images_in_cache &&
          disabled_extensions == o.disabled_extensions &&
          disable_all_extensions == o.disable_all_extensions &&
          restore_config_state_file == o.restore_config_state_file &&
          sd_checkpoint_hash == o.sd_checkpoint_hash &&
          sd_lora == o.sd_lora &&
          lora_preferred_name == o.lora_preferred_name &&
          lora_add_hashes_to_infotext == o.lora_add_hashes_to_infotext &&
          lora_show_all == o.lora_show_all &&
          lora_hide_unknown_for_versions == o.lora_hide_unknown_for_versions &&
          lora_functional == o.lora_functional &&
          canvas_hotkey_zoom == o.canvas_hotkey_zoom &&
          canvas_hotkey_adjust == o.canvas_hotkey_adjust &&
          canvas_hotkey_move == o.canvas_hotkey_move &&
          canvas_hotkey_fullscreen == o.canvas_hotkey_fullscreen &&
          canvas_hotkey_reset == o.canvas_hotkey_reset &&
          canvas_hotkey_overlap == o.canvas_hotkey_overlap &&
          canvas_show_tooltip == o.canvas_show_tooltip &&
          canvas_blur_prompt == o.canvas_blur_prompt &&
          canvas_disabled_functions == o.canvas_disabled_functions &&
          extra_options == o.extra_options &&
          extra_options_accordion == o.extra_options_accordion
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [samples_save, samples_format, samples_filename_pattern, save_images_add_number, grid_save, grid_format, grid_extended_filename, grid_only_if_multiple, grid_prevent_empty_spots, grid_zip_filename_pattern, n_rows, font, grid_text_active_color, grid_text_inactive_color, grid_background_color, enable_pnginfo, save_txt, save_images_before_face_restoration, save_images_before_highres_fix, save_images_before_color_correction, save_mask, save_mask_composite, jpeg_quality, webp_lossless, export_for_4chan, img_downscale_threshold, target_side_length, img_max_size_mp, use_original_name_batch, use_upscaler_name_as_suffix, save_selected_only, save_init_img, temp_dir, clean_temp_dir_at_start, outdir_samples, outdir_txt2img_samples, outdir_img2img_samples, outdir_extras_samples, outdir_grids, outdir_txt2img_grids, outdir_img2img_grids, outdir_save, outdir_init_images, save_to_dirs, grid_save_to_dirs, use_save_to_dirs_for_ui, directories_filename_pattern, directories_max_prompt_words, esrgan_tile, esrgan_tile_overlap, realesrgan_enabled_models, upscaler_for_img2img, face_restoration_model, code_former_weight, face_restoration_unload, show_warnings, memmon_poll_rate, samples_log_stdout, multiple_tqdm, print_hypernet_extra, list_hidden_files, disable_mmap_load_safetensors, unload_models_when_training, pin_memory, save_optimizer_state, save_training_settings_to_txt, dataset_filename_word_regex, dataset_filename_join_string, training_image_repeats_per_epoch, training_write_csv_every, training_xattention_optimizations, training_enable_tensorboard, training_tensorboard_save_images, training_tensorboard_flush_every, sd_model_checkpoint, sd_checkpoint_cache, sd_vae_checkpoint_cache, sd_vae, sd_vae_as_default, sd_unet, inpainting_mask_weight, initial_noise_multiplier, img2img_color_correction, img2img_fix_steps, img2img_background_color, enable_quantization, enable_emphasis, enable_batch_seeds, comma_padding_backtrack, clip_stop_at_last_layers, upcast_attn, auto_vae_precision, randn_source, sdxl_crop_top, sdxl_crop_left, sdxl_refiner_low_aesthetic_score, sdxl_refiner_high_aesthetic_score, cross_attention_optimization, s_min_uncond, token_merging_ratio, token_merging_ratio_img2img, token_merging_ratio_hr, pad_cond_uncond, experimental_persistent_cond_cache, use_old_emphasis_implementation, use_old_karras_scheduler_sigmas, no_dpmpp_sde_batch_determinism, use_old_hires_fix_width_height, dont_fix_second_order_samplers_schedule, hires_fix_use_firstpass_conds, interrogate_keep_models_in_memory, interrogate_return_ranks, interrogate_clip_num_beams, interrogate_clip_min_length, interrogate_clip_max_length, interrogate_clip_dict_limit, interrogate_clip_skip_categories, interrogate_deepbooru_score_threshold, deepbooru_sort_alpha, deepbooru_use_spaces, deepbooru_escape, deepbooru_filter_tags, extra_networks_show_hidden_directories, extra_networks_hidden_models, extra_networks_default_multiplier, extra_networks_card_width, extra_networks_card_height, extra_networks_card_text_scale, extra_networks_card_show_desc, extra_networks_add_text_separator, ui_extra_networks_tab_reorder, textual_inversion_print_at_load, textual_inversion_add_hashes_to_infotext, sd_hypernetwork, localization, gradio_theme, img2img_editor_height, return_grid, return_mask, return_mask_composite, do_not_show_images, send_seed, send_size, js_modal_lightbox, js_modal_lightbox_initially_zoomed, js_modal_lightbox_gamepad, js_modal_lightbox_gamepad_repeat, show_progress_in_title, samplers_in_dropdown, dimensions_and_batch_together, keyedit_precision_attention, keyedit_precision_extra, keyedit_delimiters, keyedit_move, quicksettings_list, ui_tab_order, hidden_tabs, ui_reorder_list, hires_fix_show_sampler, hires_fix_show_prompts, disable_token_counters, add_model_hash_to_info, add_model_name_to_info, add_user_name_to_info, add_version_to_infotext, disable_weights_auto_swap, infotext_styles, show_progressbar, live_previews_enable, live_previews_image_format, show_progress_grid, show_progress_every_n_steps, show_progress_type, live_preview_content, live_preview_refresh_period, hide_samplers, eta_ddim, eta_ancestral, ddim_discretize, s_churn, s_tmin, s_noise, k_sched_type, sigma_min, sigma_max, rho, eta_noise_seed_delta, always_discard_next_to_last_sigma, uni_pc_variant, uni_pc_skip_type, uni_pc_order, uni_pc_lower_order_final, postprocessing_enable_in_main_ui, postprocessing_operation_order, upscaling_max_images_in_cache, disabled_extensions, disable_all_extensions, restore_config_state_file, sd_checkpoint_hash, sd_lora, lora_preferred_name, lora_add_hashes_to_infotext, lora_show_all, lora_hide_unknown_for_versions, lora_functional, canvas_hotkey_zoom, canvas_hotkey_adjust, canvas_hotkey_move, canvas_hotkey_fullscreen, canvas_hotkey_reset, canvas_hotkey_overlap, canvas_show_tooltip, canvas_blur_prompt, canvas_disabled_functions, extra_options, extra_options_accordion].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Rauto1111AI.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
