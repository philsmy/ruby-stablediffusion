=begin
#FastAPI

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.46
=end

require 'date'

module Rauto1111AI
  class Flags
    # ==SUPPRESS==
    attr_accessor :f

    # launch.py argument: download updates for all extensions when starting the program
    attr_accessor :update_all_extensions

    # launch.py argument: do not check python version
    attr_accessor :skip_python_version_check

    # launch.py argument: do not check if CUDA is able to work properly
    attr_accessor :skip_torch_cuda_test

    # launch.py argument: install the appropriate version of xformers even if you have some version already installed
    attr_accessor :reinstall_xformers

    # launch.py argument: install the appropriate version of torch even if you have some version already installed
    attr_accessor :reinstall_torch

    # launch.py argument: check for updates at startup
    attr_accessor :update_check

    # launch.py argument: configure server for testing
    attr_accessor :test_server

    # launch.py argument: skip all environment preparation
    attr_accessor :skip_prepare_environment

    # launch.py argument: skip installation of packages
    attr_accessor :skip_install

    # do not download CLIP model even if it's not included in the checkpoint
    attr_accessor :do_not_download_clip

    # base path where all user data is stored
    attr_accessor :data_dir

    # path to config which constructs model
    attr_accessor :config

    # path to checkpoint of stable diffusion model; if specified, this checkpoint will be added to the list of checkpoints and loaded
    attr_accessor :ckpt

    # Path to directory with stable diffusion checkpoints
    attr_accessor :ckpt_dir

    # Path to directory with VAE files
    attr_accessor :vae_dir

    # GFPGAN directory
    attr_accessor :gfpgan_dir

    # GFPGAN model file name
    attr_accessor :gfpgan_model

    # do not switch the model to 16-bit floats
    attr_accessor :no_half

    # do not switch the VAE model to 16-bit floats
    attr_accessor :no_half_vae

    # do not hide progressbar in gradio UI (we hide it because it slows down ML if you have hardware acceleration in browser)
    attr_accessor :no_progressbar_hiding

    # maximum batch count value for the UI
    attr_accessor :max_batch_count

    # embeddings directory for textual inversion (default: embeddings)
    attr_accessor :embeddings_dir

    # directory with textual inversion templates
    attr_accessor :textual_inversion_templates_dir

    # hypernetwork directory
    attr_accessor :hypernetwork_dir

    # localizations directory
    attr_accessor :localizations_dir

    # allow custom script execution from webui
    attr_accessor :allow_code

    # enable stable diffusion model optimizations for sacrificing a little speed for low VRM usage
    attr_accessor :medvram

    # enable stable diffusion model optimizations for sacrificing a lot of speed for very low VRM usage
    attr_accessor :lowvram

    # load stable diffusion checkpoint weights to VRAM instead of RAM
    attr_accessor :lowram

    # disables cond/uncond batching that is enabled to save memory with --medvram or --lowvram
    attr_accessor :always_batch_cond_uncond

    # does not do anything.
    attr_accessor :unload_gfpgan

    # evaluate at this precision
    attr_accessor :precision

    # upcast sampling. No effect with --no-half. Usually produces similar results to --no-half with better performance while using less memory.
    attr_accessor :upcast_sampling

    # use share=True for gradio and make the UI accessible through their site
    attr_accessor :share

    # ngrok authtoken, alternative to gradio --share
    attr_accessor :ngrok

    # does not do anything.
    attr_accessor :ngrok_region

    # The options to pass to ngrok in JSON format, e.g.: '{\"authtoken_from_env\":true, \"basic_auth\":\"user:password\", \"oauth_provider\":\"google\", \"oauth_allow_emails\":\"user@asdf.com\"}'
    attr_accessor :ngrok_options

    # enable extensions tab regardless of other options
    attr_accessor :enable_insecure_extension_access

    # Path to directory with codeformer model file(s).
    attr_accessor :codeformer_models_path

    # Path to directory with GFPGAN model file(s).
    attr_accessor :gfpgan_models_path

    # Path to directory with ESRGAN model file(s).
    attr_accessor :esrgan_models_path

    # Path to directory with BSRGAN model file(s).
    attr_accessor :bsrgan_models_path

    # Path to directory with RealESRGAN model file(s).
    attr_accessor :realesrgan_models_path

    # Path to directory with CLIP model file(s).
    attr_accessor :clip_models_path

    # enable xformers for cross attention layers
    attr_accessor :xformers

    # enable xformers for cross attention layers regardless of whether the checking code thinks you can run it; do not make bug reports if this fails to work
    attr_accessor :force_enable_xformers

    # enable xformers with Flash Attention to improve reproducibility (supported for SD2.x or variant only)
    attr_accessor :xformers_flash_attention

    # does not do anything
    attr_accessor :deepdanbooru

    # prefer Doggettx's cross-attention layer optimization for automatic choice of optimization
    attr_accessor :opt_split_attention

    # prefer memory efficient sub-quadratic cross-attention layer optimization for automatic choice of optimization
    attr_accessor :opt_sub_quad_attention

    # query chunk size for the sub-quadratic cross-attention layer optimization to use
    attr_accessor :sub_quad_q_chunk_size

    # kv chunk size for the sub-quadratic cross-attention layer optimization to use
    attr_accessor :sub_quad_kv_chunk_size

    # the percentage of VRAM threshold for the sub-quadratic cross-attention layer optimization to use chunking
    attr_accessor :sub_quad_chunk_threshold

    # prefer InvokeAI's cross-attention layer optimization for automatic choice of optimization
    attr_accessor :opt_split_attention_invokeai

    # prefer older version of split attention optimization for automatic choice of optimization
    attr_accessor :opt_split_attention_v1

    # prefer scaled dot product cross-attention layer optimization for automatic choice of optimization; requires PyTorch 2.*
    attr_accessor :opt_sdp_attention

    # prefer scaled dot product cross-attention layer optimization without memory efficient attention for automatic choice of optimization, makes image generation deterministic; requires PyTorch 2.*
    attr_accessor :opt_sdp_no_mem_attention

    # prefer no cross-attention layer optimization for automatic choice of optimization
    attr_accessor :disable_opt_split_attention

    # do not check if produced images/latent spaces have nans; useful for running without a checkpoint in CI
    attr_accessor :disable_nan_check

    # use CPU as torch device for specified modules
    attr_accessor :use_cpu

    # launch gradio with 0.0.0.0 as server name, allowing to respond to network requests
    attr_accessor :listen

    # launch gradio with given server port, you need root/admin rights for ports < 1024, defaults to 7860 if available
    attr_accessor :port

    # does not do anything
    attr_accessor :show_negative_prompt

    # filename to use for ui configuration
    attr_accessor :ui_config_file

    # hide directory configuration from webui
    attr_accessor :hide_ui_dir_config

    # disable editing settings
    attr_accessor :freeze_settings

    # filename to use for ui settings
    attr_accessor :ui_settings_file

    # launch gradio with --debug option
    attr_accessor :gradio_debug

    # set gradio authentication like \"username:password\"; or comma-delimit multiple like \"u1:p1,u2:p2,u3:p3\"
    attr_accessor :gradio_auth

    # set gradio authentication file path ex. \"/path/to/auth/file\" same auth format as --gradio-auth
    attr_accessor :gradio_auth_path

    # does not do anything
    attr_accessor :gradio_img2img_tool

    # does not do anything
    attr_accessor :gradio_inpaint_tool

    # add path to gradio's allowed_paths, make it possible to serve files from it
    attr_accessor :gradio_allowed_path

    # change memory type for stable diffusion to channels last
    attr_accessor :opt_channelslast

    # filename to use for styles
    attr_accessor :styles_file

    # open the webui URL in the system's default browser upon launch
    attr_accessor :autolaunch

    # launches the UI with light or dark theme
    attr_accessor :theme

    # use textbox for seeds in UI (no up/down, but possible to input long seeds)
    attr_accessor :use_textbox_seed

    # do not output progressbars to console
    attr_accessor :disable_console_progressbars

    # print prompts to console when generating with txt2img and img2img
    attr_accessor :enable_console_prompts

    # Checkpoint to use as VAE; setting this argument disables all settings related to VAE
    attr_accessor :vae_path

    # disable checking pytorch models for malicious code
    attr_accessor :disable_safe_unpickle

    # use api=True to launch the API together with the webui (use --nowebui instead for only the API)
    attr_accessor :api

    # Set authentication for API like \"username:password\"; or comma-delimit multiple like \"u1:p1,u2:p2,u3:p3\"
    attr_accessor :api_auth

    # use api-log=True to enable logging of all API requests
    attr_accessor :api_log

    # use api=True to launch the API instead of the webui
    attr_accessor :nowebui

    # Don't load model to quickly launch UI
    attr_accessor :ui_debug_mode

    # Select the default CUDA device to use (export CUDA_VISIBLE_DEVICES=0,1,etc might be needed before)
    attr_accessor :device_id

    # Administrator rights
    attr_accessor :administrator

    # Allowed CORS origin(s) in the form of a comma-separated list (no spaces)
    attr_accessor :cors_allow_origins

    # Allowed CORS origin(s) in the form of a single regular expression
    attr_accessor :cors_allow_origins_regex

    # Partially enables TLS, requires --tls-certfile to fully function
    attr_accessor :tls_keyfile

    # Partially enables TLS, requires --tls-keyfile to fully function
    attr_accessor :tls_certfile

    # When passed, enables the use of self-signed certificates.
    attr_accessor :disable_tls_verify

    # Sets hostname of server
    attr_accessor :server_name

    # does not do anything
    attr_accessor :gradio_queue

    # Disables gradio queue; causes the webpage to use http requests instead of websockets; was the defaul in earlier versions
    attr_accessor :no_gradio_queue

    # Do not check versions of torch and xformers
    attr_accessor :skip_version_check

    # disable sha256 hashing of checkpoints to help loading performance
    attr_accessor :no_hashing

    # don't download SD1.5 model even if no model is found in --ckpt-dir
    attr_accessor :no_download_sd_model

    # customize the subpath for gradio, use with reverse proxy
    attr_accessor :subpath

    # add /_stop route to stop server
    attr_accessor :add_stop_route

    # enable server stop/restart/kill via api
    attr_accessor :api_server_stop

    # set timeout_keep_alive for uvicorn
    attr_accessor :timeout_keep_alive

    # Path to directory with LDSR model file(s).
    attr_accessor :ldsr_models_path

    # Path to directory with Lora networks.
    attr_accessor :lora_dir

    # Path to directory with LyCORIS networks (for backawards compatibility; can also use --lyco-dir).
    attr_accessor :lyco_dir_backcompat

    # Path to directory with ScuNET model file(s).
    attr_accessor :scunet_models_path

    # Path to directory with SwinIR model file(s).
    attr_accessor :swinir_models_path

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'f' => :'f',
        :'update_all_extensions' => :'update_all_extensions',
        :'skip_python_version_check' => :'skip_python_version_check',
        :'skip_torch_cuda_test' => :'skip_torch_cuda_test',
        :'reinstall_xformers' => :'reinstall_xformers',
        :'reinstall_torch' => :'reinstall_torch',
        :'update_check' => :'update_check',
        :'test_server' => :'test_server',
        :'skip_prepare_environment' => :'skip_prepare_environment',
        :'skip_install' => :'skip_install',
        :'do_not_download_clip' => :'do_not_download_clip',
        :'data_dir' => :'data_dir',
        :'config' => :'config',
        :'ckpt' => :'ckpt',
        :'ckpt_dir' => :'ckpt_dir',
        :'vae_dir' => :'vae_dir',
        :'gfpgan_dir' => :'gfpgan_dir',
        :'gfpgan_model' => :'gfpgan_model',
        :'no_half' => :'no_half',
        :'no_half_vae' => :'no_half_vae',
        :'no_progressbar_hiding' => :'no_progressbar_hiding',
        :'max_batch_count' => :'max_batch_count',
        :'embeddings_dir' => :'embeddings_dir',
        :'textual_inversion_templates_dir' => :'textual_inversion_templates_dir',
        :'hypernetwork_dir' => :'hypernetwork_dir',
        :'localizations_dir' => :'localizations_dir',
        :'allow_code' => :'allow_code',
        :'medvram' => :'medvram',
        :'lowvram' => :'lowvram',
        :'lowram' => :'lowram',
        :'always_batch_cond_uncond' => :'always_batch_cond_uncond',
        :'unload_gfpgan' => :'unload_gfpgan',
        :'precision' => :'precision',
        :'upcast_sampling' => :'upcast_sampling',
        :'share' => :'share',
        :'ngrok' => :'ngrok',
        :'ngrok_region' => :'ngrok_region',
        :'ngrok_options' => :'ngrok_options',
        :'enable_insecure_extension_access' => :'enable_insecure_extension_access',
        :'codeformer_models_path' => :'codeformer_models_path',
        :'gfpgan_models_path' => :'gfpgan_models_path',
        :'esrgan_models_path' => :'esrgan_models_path',
        :'bsrgan_models_path' => :'bsrgan_models_path',
        :'realesrgan_models_path' => :'realesrgan_models_path',
        :'clip_models_path' => :'clip_models_path',
        :'xformers' => :'xformers',
        :'force_enable_xformers' => :'force_enable_xformers',
        :'xformers_flash_attention' => :'xformers_flash_attention',
        :'deepdanbooru' => :'deepdanbooru',
        :'opt_split_attention' => :'opt_split_attention',
        :'opt_sub_quad_attention' => :'opt_sub_quad_attention',
        :'sub_quad_q_chunk_size' => :'sub_quad_q_chunk_size',
        :'sub_quad_kv_chunk_size' => :'sub_quad_kv_chunk_size',
        :'sub_quad_chunk_threshold' => :'sub_quad_chunk_threshold',
        :'opt_split_attention_invokeai' => :'opt_split_attention_invokeai',
        :'opt_split_attention_v1' => :'opt_split_attention_v1',
        :'opt_sdp_attention' => :'opt_sdp_attention',
        :'opt_sdp_no_mem_attention' => :'opt_sdp_no_mem_attention',
        :'disable_opt_split_attention' => :'disable_opt_split_attention',
        :'disable_nan_check' => :'disable_nan_check',
        :'use_cpu' => :'use_cpu',
        :'listen' => :'listen',
        :'port' => :'port',
        :'show_negative_prompt' => :'show_negative_prompt',
        :'ui_config_file' => :'ui_config_file',
        :'hide_ui_dir_config' => :'hide_ui_dir_config',
        :'freeze_settings' => :'freeze_settings',
        :'ui_settings_file' => :'ui_settings_file',
        :'gradio_debug' => :'gradio_debug',
        :'gradio_auth' => :'gradio_auth',
        :'gradio_auth_path' => :'gradio_auth_path',
        :'gradio_img2img_tool' => :'gradio_img2img_tool',
        :'gradio_inpaint_tool' => :'gradio_inpaint_tool',
        :'gradio_allowed_path' => :'gradio_allowed_path',
        :'opt_channelslast' => :'opt_channelslast',
        :'styles_file' => :'styles_file',
        :'autolaunch' => :'autolaunch',
        :'theme' => :'theme',
        :'use_textbox_seed' => :'use_textbox_seed',
        :'disable_console_progressbars' => :'disable_console_progressbars',
        :'enable_console_prompts' => :'enable_console_prompts',
        :'vae_path' => :'vae_path',
        :'disable_safe_unpickle' => :'disable_safe_unpickle',
        :'api' => :'api',
        :'api_auth' => :'api_auth',
        :'api_log' => :'api_log',
        :'nowebui' => :'nowebui',
        :'ui_debug_mode' => :'ui_debug_mode',
        :'device_id' => :'device_id',
        :'administrator' => :'administrator',
        :'cors_allow_origins' => :'cors_allow_origins',
        :'cors_allow_origins_regex' => :'cors_allow_origins_regex',
        :'tls_keyfile' => :'tls_keyfile',
        :'tls_certfile' => :'tls_certfile',
        :'disable_tls_verify' => :'disable_tls_verify',
        :'server_name' => :'server_name',
        :'gradio_queue' => :'gradio_queue',
        :'no_gradio_queue' => :'no_gradio_queue',
        :'skip_version_check' => :'skip_version_check',
        :'no_hashing' => :'no_hashing',
        :'no_download_sd_model' => :'no_download_sd_model',
        :'subpath' => :'subpath',
        :'add_stop_route' => :'add_stop_route',
        :'api_server_stop' => :'api_server_stop',
        :'timeout_keep_alive' => :'timeout_keep_alive',
        :'ldsr_models_path' => :'ldsr_models_path',
        :'lora_dir' => :'lora_dir',
        :'lyco_dir_backcompat' => :'lyco_dir_backcompat',
        :'scunet_models_path' => :'scunet_models_path',
        :'swinir_models_path' => :'swinir_models_path'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'f' => :'Object',
        :'update_all_extensions' => :'Object',
        :'skip_python_version_check' => :'Object',
        :'skip_torch_cuda_test' => :'Object',
        :'reinstall_xformers' => :'Object',
        :'reinstall_torch' => :'Object',
        :'update_check' => :'Object',
        :'test_server' => :'Object',
        :'skip_prepare_environment' => :'Object',
        :'skip_install' => :'Object',
        :'do_not_download_clip' => :'Object',
        :'data_dir' => :'Object',
        :'config' => :'Object',
        :'ckpt' => :'Object',
        :'ckpt_dir' => :'Object',
        :'vae_dir' => :'Object',
        :'gfpgan_dir' => :'Object',
        :'gfpgan_model' => :'Object',
        :'no_half' => :'Object',
        :'no_half_vae' => :'Object',
        :'no_progressbar_hiding' => :'Object',
        :'max_batch_count' => :'Object',
        :'embeddings_dir' => :'Object',
        :'textual_inversion_templates_dir' => :'Object',
        :'hypernetwork_dir' => :'Object',
        :'localizations_dir' => :'Object',
        :'allow_code' => :'Object',
        :'medvram' => :'Object',
        :'lowvram' => :'Object',
        :'lowram' => :'Object',
        :'always_batch_cond_uncond' => :'Object',
        :'unload_gfpgan' => :'Object',
        :'precision' => :'Object',
        :'upcast_sampling' => :'Object',
        :'share' => :'Object',
        :'ngrok' => :'Object',
        :'ngrok_region' => :'Object',
        :'ngrok_options' => :'Object',
        :'enable_insecure_extension_access' => :'Object',
        :'codeformer_models_path' => :'Object',
        :'gfpgan_models_path' => :'Object',
        :'esrgan_models_path' => :'Object',
        :'bsrgan_models_path' => :'Object',
        :'realesrgan_models_path' => :'Object',
        :'clip_models_path' => :'Object',
        :'xformers' => :'Object',
        :'force_enable_xformers' => :'Object',
        :'xformers_flash_attention' => :'Object',
        :'deepdanbooru' => :'Object',
        :'opt_split_attention' => :'Object',
        :'opt_sub_quad_attention' => :'Object',
        :'sub_quad_q_chunk_size' => :'Object',
        :'sub_quad_kv_chunk_size' => :'Object',
        :'sub_quad_chunk_threshold' => :'Object',
        :'opt_split_attention_invokeai' => :'Object',
        :'opt_split_attention_v1' => :'Object',
        :'opt_sdp_attention' => :'Object',
        :'opt_sdp_no_mem_attention' => :'Object',
        :'disable_opt_split_attention' => :'Object',
        :'disable_nan_check' => :'Object',
        :'use_cpu' => :'Object',
        :'listen' => :'Object',
        :'port' => :'Object',
        :'show_negative_prompt' => :'Object',
        :'ui_config_file' => :'Object',
        :'hide_ui_dir_config' => :'Object',
        :'freeze_settings' => :'Object',
        :'ui_settings_file' => :'Object',
        :'gradio_debug' => :'Object',
        :'gradio_auth' => :'Object',
        :'gradio_auth_path' => :'Object',
        :'gradio_img2img_tool' => :'Object',
        :'gradio_inpaint_tool' => :'Object',
        :'gradio_allowed_path' => :'Object',
        :'opt_channelslast' => :'Object',
        :'styles_file' => :'Object',
        :'autolaunch' => :'Object',
        :'theme' => :'Object',
        :'use_textbox_seed' => :'Object',
        :'disable_console_progressbars' => :'Object',
        :'enable_console_prompts' => :'Object',
        :'vae_path' => :'Object',
        :'disable_safe_unpickle' => :'Object',
        :'api' => :'Object',
        :'api_auth' => :'Object',
        :'api_log' => :'Object',
        :'nowebui' => :'Object',
        :'ui_debug_mode' => :'Object',
        :'device_id' => :'Object',
        :'administrator' => :'Object',
        :'cors_allow_origins' => :'Object',
        :'cors_allow_origins_regex' => :'Object',
        :'tls_keyfile' => :'Object',
        :'tls_certfile' => :'Object',
        :'disable_tls_verify' => :'Object',
        :'server_name' => :'Object',
        :'gradio_queue' => :'Object',
        :'no_gradio_queue' => :'Object',
        :'skip_version_check' => :'Object',
        :'no_hashing' => :'Object',
        :'no_download_sd_model' => :'Object',
        :'subpath' => :'Object',
        :'add_stop_route' => :'Object',
        :'api_server_stop' => :'Object',
        :'timeout_keep_alive' => :'Object',
        :'ldsr_models_path' => :'Object',
        :'lora_dir' => :'Object',
        :'lyco_dir_backcompat' => :'Object',
        :'scunet_models_path' => :'Object',
        :'swinir_models_path' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Rauto1111AI::Flags` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Rauto1111AI::Flags`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'f')
        self.f = attributes[:'f']
      else
        self.f = false
      end

      if attributes.key?(:'update_all_extensions')
        self.update_all_extensions = attributes[:'update_all_extensions']
      else
        self.update_all_extensions = false
      end

      if attributes.key?(:'skip_python_version_check')
        self.skip_python_version_check = attributes[:'skip_python_version_check']
      else
        self.skip_python_version_check = false
      end

      if attributes.key?(:'skip_torch_cuda_test')
        self.skip_torch_cuda_test = attributes[:'skip_torch_cuda_test']
      else
        self.skip_torch_cuda_test = false
      end

      if attributes.key?(:'reinstall_xformers')
        self.reinstall_xformers = attributes[:'reinstall_xformers']
      else
        self.reinstall_xformers = false
      end

      if attributes.key?(:'reinstall_torch')
        self.reinstall_torch = attributes[:'reinstall_torch']
      else
        self.reinstall_torch = false
      end

      if attributes.key?(:'update_check')
        self.update_check = attributes[:'update_check']
      else
        self.update_check = false
      end

      if attributes.key?(:'test_server')
        self.test_server = attributes[:'test_server']
      else
        self.test_server = false
      end

      if attributes.key?(:'skip_prepare_environment')
        self.skip_prepare_environment = attributes[:'skip_prepare_environment']
      else
        self.skip_prepare_environment = false
      end

      if attributes.key?(:'skip_install')
        self.skip_install = attributes[:'skip_install']
      else
        self.skip_install = false
      end

      if attributes.key?(:'do_not_download_clip')
        self.do_not_download_clip = attributes[:'do_not_download_clip']
      else
        self.do_not_download_clip = false
      end

      if attributes.key?(:'data_dir')
        self.data_dir = attributes[:'data_dir']
      else
        self.data_dir = '/home/ubuntu/stable-diffusion-webui'
      end

      if attributes.key?(:'config')
        self.config = attributes[:'config']
      else
        self.config = '/home/ubuntu/stable-diffusion-webui/configs/v1-inference.yaml'
      end

      if attributes.key?(:'ckpt')
        self.ckpt = attributes[:'ckpt']
      else
        self.ckpt = '/home/ubuntu/stable-diffusion-webui/model.ckpt'
      end

      if attributes.key?(:'ckpt_dir')
        self.ckpt_dir = attributes[:'ckpt_dir']
      end

      if attributes.key?(:'vae_dir')
        self.vae_dir = attributes[:'vae_dir']
      end

      if attributes.key?(:'gfpgan_dir')
        self.gfpgan_dir = attributes[:'gfpgan_dir']
      else
        self.gfpgan_dir = './GFPGAN'
      end

      if attributes.key?(:'gfpgan_model')
        self.gfpgan_model = attributes[:'gfpgan_model']
      end

      if attributes.key?(:'no_half')
        self.no_half = attributes[:'no_half']
      else
        self.no_half = false
      end

      if attributes.key?(:'no_half_vae')
        self.no_half_vae = attributes[:'no_half_vae']
      else
        self.no_half_vae = false
      end

      if attributes.key?(:'no_progressbar_hiding')
        self.no_progressbar_hiding = attributes[:'no_progressbar_hiding']
      else
        self.no_progressbar_hiding = false
      end

      if attributes.key?(:'max_batch_count')
        self.max_batch_count = attributes[:'max_batch_count']
      else
        self.max_batch_count = 16
      end

      if attributes.key?(:'embeddings_dir')
        self.embeddings_dir = attributes[:'embeddings_dir']
      else
        self.embeddings_dir = '/home/ubuntu/stable-diffusion-webui/embeddings'
      end

      if attributes.key?(:'textual_inversion_templates_dir')
        self.textual_inversion_templates_dir = attributes[:'textual_inversion_templates_dir']
      else
        self.textual_inversion_templates_dir = '/home/ubuntu/stable-diffusion-webui/textual_inversion_templates'
      end

      if attributes.key?(:'hypernetwork_dir')
        self.hypernetwork_dir = attributes[:'hypernetwork_dir']
      else
        self.hypernetwork_dir = '/home/ubuntu/stable-diffusion-webui/models/hypernetworks'
      end

      if attributes.key?(:'localizations_dir')
        self.localizations_dir = attributes[:'localizations_dir']
      else
        self.localizations_dir = '/home/ubuntu/stable-diffusion-webui/localizations'
      end

      if attributes.key?(:'allow_code')
        self.allow_code = attributes[:'allow_code']
      else
        self.allow_code = false
      end

      if attributes.key?(:'medvram')
        self.medvram = attributes[:'medvram']
      else
        self.medvram = false
      end

      if attributes.key?(:'lowvram')
        self.lowvram = attributes[:'lowvram']
      else
        self.lowvram = false
      end

      if attributes.key?(:'lowram')
        self.lowram = attributes[:'lowram']
      else
        self.lowram = false
      end

      if attributes.key?(:'always_batch_cond_uncond')
        self.always_batch_cond_uncond = attributes[:'always_batch_cond_uncond']
      else
        self.always_batch_cond_uncond = false
      end

      if attributes.key?(:'unload_gfpgan')
        self.unload_gfpgan = attributes[:'unload_gfpgan']
      else
        self.unload_gfpgan = false
      end

      if attributes.key?(:'precision')
        self.precision = attributes[:'precision']
      else
        self.precision = 'autocast'
      end

      if attributes.key?(:'upcast_sampling')
        self.upcast_sampling = attributes[:'upcast_sampling']
      else
        self.upcast_sampling = false
      end

      if attributes.key?(:'share')
        self.share = attributes[:'share']
      else
        self.share = false
      end

      if attributes.key?(:'ngrok')
        self.ngrok = attributes[:'ngrok']
      end

      if attributes.key?(:'ngrok_region')
        self.ngrok_region = attributes[:'ngrok_region']
      else
        self.ngrok_region = ''
      end

      if attributes.key?(:'ngrok_options')
        self.ngrok_options = attributes[:'ngrok_options']
      end

      if attributes.key?(:'enable_insecure_extension_access')
        self.enable_insecure_extension_access = attributes[:'enable_insecure_extension_access']
      else
        self.enable_insecure_extension_access = false
      end

      if attributes.key?(:'codeformer_models_path')
        self.codeformer_models_path = attributes[:'codeformer_models_path']
      else
        self.codeformer_models_path = '/home/ubuntu/stable-diffusion-webui/models/Codeformer'
      end

      if attributes.key?(:'gfpgan_models_path')
        self.gfpgan_models_path = attributes[:'gfpgan_models_path']
      else
        self.gfpgan_models_path = '/home/ubuntu/stable-diffusion-webui/models/GFPGAN'
      end

      if attributes.key?(:'esrgan_models_path')
        self.esrgan_models_path = attributes[:'esrgan_models_path']
      else
        self.esrgan_models_path = '/home/ubuntu/stable-diffusion-webui/models/ESRGAN'
      end

      if attributes.key?(:'bsrgan_models_path')
        self.bsrgan_models_path = attributes[:'bsrgan_models_path']
      else
        self.bsrgan_models_path = '/home/ubuntu/stable-diffusion-webui/models/BSRGAN'
      end

      if attributes.key?(:'realesrgan_models_path')
        self.realesrgan_models_path = attributes[:'realesrgan_models_path']
      else
        self.realesrgan_models_path = '/home/ubuntu/stable-diffusion-webui/models/RealESRGAN'
      end

      if attributes.key?(:'clip_models_path')
        self.clip_models_path = attributes[:'clip_models_path']
      end

      if attributes.key?(:'xformers')
        self.xformers = attributes[:'xformers']
      else
        self.xformers = false
      end

      if attributes.key?(:'force_enable_xformers')
        self.force_enable_xformers = attributes[:'force_enable_xformers']
      else
        self.force_enable_xformers = false
      end

      if attributes.key?(:'xformers_flash_attention')
        self.xformers_flash_attention = attributes[:'xformers_flash_attention']
      else
        self.xformers_flash_attention = false
      end

      if attributes.key?(:'deepdanbooru')
        self.deepdanbooru = attributes[:'deepdanbooru']
      else
        self.deepdanbooru = false
      end

      if attributes.key?(:'opt_split_attention')
        self.opt_split_attention = attributes[:'opt_split_attention']
      else
        self.opt_split_attention = false
      end

      if attributes.key?(:'opt_sub_quad_attention')
        self.opt_sub_quad_attention = attributes[:'opt_sub_quad_attention']
      else
        self.opt_sub_quad_attention = false
      end

      if attributes.key?(:'sub_quad_q_chunk_size')
        self.sub_quad_q_chunk_size = attributes[:'sub_quad_q_chunk_size']
      else
        self.sub_quad_q_chunk_size = 1024
      end

      if attributes.key?(:'sub_quad_kv_chunk_size')
        self.sub_quad_kv_chunk_size = attributes[:'sub_quad_kv_chunk_size']
      end

      if attributes.key?(:'sub_quad_chunk_threshold')
        self.sub_quad_chunk_threshold = attributes[:'sub_quad_chunk_threshold']
      end

      if attributes.key?(:'opt_split_attention_invokeai')
        self.opt_split_attention_invokeai = attributes[:'opt_split_attention_invokeai']
      else
        self.opt_split_attention_invokeai = false
      end

      if attributes.key?(:'opt_split_attention_v1')
        self.opt_split_attention_v1 = attributes[:'opt_split_attention_v1']
      else
        self.opt_split_attention_v1 = false
      end

      if attributes.key?(:'opt_sdp_attention')
        self.opt_sdp_attention = attributes[:'opt_sdp_attention']
      else
        self.opt_sdp_attention = false
      end

      if attributes.key?(:'opt_sdp_no_mem_attention')
        self.opt_sdp_no_mem_attention = attributes[:'opt_sdp_no_mem_attention']
      else
        self.opt_sdp_no_mem_attention = false
      end

      if attributes.key?(:'disable_opt_split_attention')
        self.disable_opt_split_attention = attributes[:'disable_opt_split_attention']
      else
        self.disable_opt_split_attention = false
      end

      if attributes.key?(:'disable_nan_check')
        self.disable_nan_check = attributes[:'disable_nan_check']
      else
        self.disable_nan_check = false
      end

      if attributes.key?(:'use_cpu')
        if (value = attributes[:'use_cpu']).is_a?(Array)
          self.use_cpu = value
        end
      end

      if attributes.key?(:'listen')
        self.listen = attributes[:'listen']
      else
        self.listen = false
      end

      if attributes.key?(:'port')
        self.port = attributes[:'port']
      end

      if attributes.key?(:'show_negative_prompt')
        self.show_negative_prompt = attributes[:'show_negative_prompt']
      else
        self.show_negative_prompt = false
      end

      if attributes.key?(:'ui_config_file')
        self.ui_config_file = attributes[:'ui_config_file']
      else
        self.ui_config_file = '/home/ubuntu/stable-diffusion-webui/ui-config.json'
      end

      if attributes.key?(:'hide_ui_dir_config')
        self.hide_ui_dir_config = attributes[:'hide_ui_dir_config']
      else
        self.hide_ui_dir_config = false
      end

      if attributes.key?(:'freeze_settings')
        self.freeze_settings = attributes[:'freeze_settings']
      else
        self.freeze_settings = false
      end

      if attributes.key?(:'ui_settings_file')
        self.ui_settings_file = attributes[:'ui_settings_file']
      else
        self.ui_settings_file = '/home/ubuntu/stable-diffusion-webui/config.json'
      end

      if attributes.key?(:'gradio_debug')
        self.gradio_debug = attributes[:'gradio_debug']
      else
        self.gradio_debug = false
      end

      if attributes.key?(:'gradio_auth')
        self.gradio_auth = attributes[:'gradio_auth']
      end

      if attributes.key?(:'gradio_auth_path')
        self.gradio_auth_path = attributes[:'gradio_auth_path']
      end

      if attributes.key?(:'gradio_img2img_tool')
        self.gradio_img2img_tool = attributes[:'gradio_img2img_tool']
      end

      if attributes.key?(:'gradio_inpaint_tool')
        self.gradio_inpaint_tool = attributes[:'gradio_inpaint_tool']
      end

      if attributes.key?(:'gradio_allowed_path')
        self.gradio_allowed_path = attributes[:'gradio_allowed_path']
      end

      if attributes.key?(:'opt_channelslast')
        self.opt_channelslast = attributes[:'opt_channelslast']
      else
        self.opt_channelslast = false
      end

      if attributes.key?(:'styles_file')
        self.styles_file = attributes[:'styles_file']
      else
        self.styles_file = '/home/ubuntu/stable-diffusion-webui/styles.csv'
      end

      if attributes.key?(:'autolaunch')
        self.autolaunch = attributes[:'autolaunch']
      else
        self.autolaunch = false
      end

      if attributes.key?(:'theme')
        self.theme = attributes[:'theme']
      end

      if attributes.key?(:'use_textbox_seed')
        self.use_textbox_seed = attributes[:'use_textbox_seed']
      else
        self.use_textbox_seed = false
      end

      if attributes.key?(:'disable_console_progressbars')
        self.disable_console_progressbars = attributes[:'disable_console_progressbars']
      else
        self.disable_console_progressbars = false
      end

      if attributes.key?(:'enable_console_prompts')
        self.enable_console_prompts = attributes[:'enable_console_prompts']
      else
        self.enable_console_prompts = false
      end

      if attributes.key?(:'vae_path')
        self.vae_path = attributes[:'vae_path']
      end

      if attributes.key?(:'disable_safe_unpickle')
        self.disable_safe_unpickle = attributes[:'disable_safe_unpickle']
      else
        self.disable_safe_unpickle = false
      end

      if attributes.key?(:'api')
        self.api = attributes[:'api']
      else
        self.api = false
      end

      if attributes.key?(:'api_auth')
        self.api_auth = attributes[:'api_auth']
      end

      if attributes.key?(:'api_log')
        self.api_log = attributes[:'api_log']
      else
        self.api_log = false
      end

      if attributes.key?(:'nowebui')
        self.nowebui = attributes[:'nowebui']
      else
        self.nowebui = false
      end

      if attributes.key?(:'ui_debug_mode')
        self.ui_debug_mode = attributes[:'ui_debug_mode']
      else
        self.ui_debug_mode = false
      end

      if attributes.key?(:'device_id')
        self.device_id = attributes[:'device_id']
      end

      if attributes.key?(:'administrator')
        self.administrator = attributes[:'administrator']
      else
        self.administrator = false
      end

      if attributes.key?(:'cors_allow_origins')
        self.cors_allow_origins = attributes[:'cors_allow_origins']
      end

      if attributes.key?(:'cors_allow_origins_regex')
        self.cors_allow_origins_regex = attributes[:'cors_allow_origins_regex']
      end

      if attributes.key?(:'tls_keyfile')
        self.tls_keyfile = attributes[:'tls_keyfile']
      end

      if attributes.key?(:'tls_certfile')
        self.tls_certfile = attributes[:'tls_certfile']
      end

      if attributes.key?(:'disable_tls_verify')
        self.disable_tls_verify = attributes[:'disable_tls_verify']
      end

      if attributes.key?(:'server_name')
        self.server_name = attributes[:'server_name']
      end

      if attributes.key?(:'gradio_queue')
        self.gradio_queue = attributes[:'gradio_queue']
      else
        self.gradio_queue = true
      end

      if attributes.key?(:'no_gradio_queue')
        self.no_gradio_queue = attributes[:'no_gradio_queue']
      else
        self.no_gradio_queue = false
      end

      if attributes.key?(:'skip_version_check')
        self.skip_version_check = attributes[:'skip_version_check']
      else
        self.skip_version_check = false
      end

      if attributes.key?(:'no_hashing')
        self.no_hashing = attributes[:'no_hashing']
      else
        self.no_hashing = false
      end

      if attributes.key?(:'no_download_sd_model')
        self.no_download_sd_model = attributes[:'no_download_sd_model']
      else
        self.no_download_sd_model = false
      end

      if attributes.key?(:'subpath')
        self.subpath = attributes[:'subpath']
      end

      if attributes.key?(:'add_stop_route')
        self.add_stop_route = attributes[:'add_stop_route']
      else
        self.add_stop_route = false
      end

      if attributes.key?(:'api_server_stop')
        self.api_server_stop = attributes[:'api_server_stop']
      else
        self.api_server_stop = false
      end

      if attributes.key?(:'timeout_keep_alive')
        self.timeout_keep_alive = attributes[:'timeout_keep_alive']
      else
        self.timeout_keep_alive = 30
      end

      if attributes.key?(:'ldsr_models_path')
        self.ldsr_models_path = attributes[:'ldsr_models_path']
      else
        self.ldsr_models_path = '/home/ubuntu/stable-diffusion-webui/models/LDSR'
      end

      if attributes.key?(:'lora_dir')
        self.lora_dir = attributes[:'lora_dir']
      else
        self.lora_dir = '/home/ubuntu/stable-diffusion-webui/models/Lora'
      end

      if attributes.key?(:'lyco_dir_backcompat')
        self.lyco_dir_backcompat = attributes[:'lyco_dir_backcompat']
      else
        self.lyco_dir_backcompat = '/home/ubuntu/stable-diffusion-webui/models/LyCORIS'
      end

      if attributes.key?(:'scunet_models_path')
        self.scunet_models_path = attributes[:'scunet_models_path']
      else
        self.scunet_models_path = '/home/ubuntu/stable-diffusion-webui/models/ScuNET'
      end

      if attributes.key?(:'swinir_models_path')
        self.swinir_models_path = attributes[:'swinir_models_path']
      else
        self.swinir_models_path = '/home/ubuntu/stable-diffusion-webui/models/SwinIR'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          f == o.f &&
          update_all_extensions == o.update_all_extensions &&
          skip_python_version_check == o.skip_python_version_check &&
          skip_torch_cuda_test == o.skip_torch_cuda_test &&
          reinstall_xformers == o.reinstall_xformers &&
          reinstall_torch == o.reinstall_torch &&
          update_check == o.update_check &&
          test_server == o.test_server &&
          skip_prepare_environment == o.skip_prepare_environment &&
          skip_install == o.skip_install &&
          do_not_download_clip == o.do_not_download_clip &&
          data_dir == o.data_dir &&
          config == o.config &&
          ckpt == o.ckpt &&
          ckpt_dir == o.ckpt_dir &&
          vae_dir == o.vae_dir &&
          gfpgan_dir == o.gfpgan_dir &&
          gfpgan_model == o.gfpgan_model &&
          no_half == o.no_half &&
          no_half_vae == o.no_half_vae &&
          no_progressbar_hiding == o.no_progressbar_hiding &&
          max_batch_count == o.max_batch_count &&
          embeddings_dir == o.embeddings_dir &&
          textual_inversion_templates_dir == o.textual_inversion_templates_dir &&
          hypernetwork_dir == o.hypernetwork_dir &&
          localizations_dir == o.localizations_dir &&
          allow_code == o.allow_code &&
          medvram == o.medvram &&
          lowvram == o.lowvram &&
          lowram == o.lowram &&
          always_batch_cond_uncond == o.always_batch_cond_uncond &&
          unload_gfpgan == o.unload_gfpgan &&
          precision == o.precision &&
          upcast_sampling == o.upcast_sampling &&
          share == o.share &&
          ngrok == o.ngrok &&
          ngrok_region == o.ngrok_region &&
          ngrok_options == o.ngrok_options &&
          enable_insecure_extension_access == o.enable_insecure_extension_access &&
          codeformer_models_path == o.codeformer_models_path &&
          gfpgan_models_path == o.gfpgan_models_path &&
          esrgan_models_path == o.esrgan_models_path &&
          bsrgan_models_path == o.bsrgan_models_path &&
          realesrgan_models_path == o.realesrgan_models_path &&
          clip_models_path == o.clip_models_path &&
          xformers == o.xformers &&
          force_enable_xformers == o.force_enable_xformers &&
          xformers_flash_attention == o.xformers_flash_attention &&
          deepdanbooru == o.deepdanbooru &&
          opt_split_attention == o.opt_split_attention &&
          opt_sub_quad_attention == o.opt_sub_quad_attention &&
          sub_quad_q_chunk_size == o.sub_quad_q_chunk_size &&
          sub_quad_kv_chunk_size == o.sub_quad_kv_chunk_size &&
          sub_quad_chunk_threshold == o.sub_quad_chunk_threshold &&
          opt_split_attention_invokeai == o.opt_split_attention_invokeai &&
          opt_split_attention_v1 == o.opt_split_attention_v1 &&
          opt_sdp_attention == o.opt_sdp_attention &&
          opt_sdp_no_mem_attention == o.opt_sdp_no_mem_attention &&
          disable_opt_split_attention == o.disable_opt_split_attention &&
          disable_nan_check == o.disable_nan_check &&
          use_cpu == o.use_cpu &&
          listen == o.listen &&
          port == o.port &&
          show_negative_prompt == o.show_negative_prompt &&
          ui_config_file == o.ui_config_file &&
          hide_ui_dir_config == o.hide_ui_dir_config &&
          freeze_settings == o.freeze_settings &&
          ui_settings_file == o.ui_settings_file &&
          gradio_debug == o.gradio_debug &&
          gradio_auth == o.gradio_auth &&
          gradio_auth_path == o.gradio_auth_path &&
          gradio_img2img_tool == o.gradio_img2img_tool &&
          gradio_inpaint_tool == o.gradio_inpaint_tool &&
          gradio_allowed_path == o.gradio_allowed_path &&
          opt_channelslast == o.opt_channelslast &&
          styles_file == o.styles_file &&
          autolaunch == o.autolaunch &&
          theme == o.theme &&
          use_textbox_seed == o.use_textbox_seed &&
          disable_console_progressbars == o.disable_console_progressbars &&
          enable_console_prompts == o.enable_console_prompts &&
          vae_path == o.vae_path &&
          disable_safe_unpickle == o.disable_safe_unpickle &&
          api == o.api &&
          api_auth == o.api_auth &&
          api_log == o.api_log &&
          nowebui == o.nowebui &&
          ui_debug_mode == o.ui_debug_mode &&
          device_id == o.device_id &&
          administrator == o.administrator &&
          cors_allow_origins == o.cors_allow_origins &&
          cors_allow_origins_regex == o.cors_allow_origins_regex &&
          tls_keyfile == o.tls_keyfile &&
          tls_certfile == o.tls_certfile &&
          disable_tls_verify == o.disable_tls_verify &&
          server_name == o.server_name &&
          gradio_queue == o.gradio_queue &&
          no_gradio_queue == o.no_gradio_queue &&
          skip_version_check == o.skip_version_check &&
          no_hashing == o.no_hashing &&
          no_download_sd_model == o.no_download_sd_model &&
          subpath == o.subpath &&
          add_stop_route == o.add_stop_route &&
          api_server_stop == o.api_server_stop &&
          timeout_keep_alive == o.timeout_keep_alive &&
          ldsr_models_path == o.ldsr_models_path &&
          lora_dir == o.lora_dir &&
          lyco_dir_backcompat == o.lyco_dir_backcompat &&
          scunet_models_path == o.scunet_models_path &&
          swinir_models_path == o.swinir_models_path
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [f, update_all_extensions, skip_python_version_check, skip_torch_cuda_test, reinstall_xformers, reinstall_torch, update_check, test_server, skip_prepare_environment, skip_install, do_not_download_clip, data_dir, config, ckpt, ckpt_dir, vae_dir, gfpgan_dir, gfpgan_model, no_half, no_half_vae, no_progressbar_hiding, max_batch_count, embeddings_dir, textual_inversion_templates_dir, hypernetwork_dir, localizations_dir, allow_code, medvram, lowvram, lowram, always_batch_cond_uncond, unload_gfpgan, precision, upcast_sampling, share, ngrok, ngrok_region, ngrok_options, enable_insecure_extension_access, codeformer_models_path, gfpgan_models_path, esrgan_models_path, bsrgan_models_path, realesrgan_models_path, clip_models_path, xformers, force_enable_xformers, xformers_flash_attention, deepdanbooru, opt_split_attention, opt_sub_quad_attention, sub_quad_q_chunk_size, sub_quad_kv_chunk_size, sub_quad_chunk_threshold, opt_split_attention_invokeai, opt_split_attention_v1, opt_sdp_attention, opt_sdp_no_mem_attention, disable_opt_split_attention, disable_nan_check, use_cpu, listen, port, show_negative_prompt, ui_config_file, hide_ui_dir_config, freeze_settings, ui_settings_file, gradio_debug, gradio_auth, gradio_auth_path, gradio_img2img_tool, gradio_inpaint_tool, gradio_allowed_path, opt_channelslast, styles_file, autolaunch, theme, use_textbox_seed, disable_console_progressbars, enable_console_prompts, vae_path, disable_safe_unpickle, api, api_auth, api_log, nowebui, ui_debug_mode, device_id, administrator, cors_allow_origins, cors_allow_origins_regex, tls_keyfile, tls_certfile, disable_tls_verify, server_name, gradio_queue, no_gradio_queue, skip_version_check, no_hashing, no_download_sd_model, subpath, add_stop_route, api_server_stop, timeout_keep_alive, ldsr_models_path, lora_dir, lyco_dir_backcompat, scunet_models_path, swinir_models_path].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Rauto1111AI.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
