=begin
#FastAPI

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.46
=end

module RStableDiffusionAI
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Api Info
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :serialize  (default to true)
    # @return [nil]
    def api_info_info_get(opts = {})
      api_info_info_get_with_http_info(opts)
      nil
    end

    # Api Info
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :serialize 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_info_info_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_info_info_get ...'
      end
      # resource path
      local_var_path = '/info'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'serialize'] = opts[:'serialize'] if !opts[:'serialize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_info_info_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Api Info
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :serialize  (default to true)
    # @return [nil]
    def api_info_info_get_0(opts = {})
      api_info_info_get_0_with_http_info(opts)
      nil
    end

    # Api Info
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :serialize 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_info_info_get_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_info_info_get_0 ...'
      end
      # resource path
      local_var_path = '/info/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'serialize'] = opts[:'serialize'] if !opts[:'serialize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_info_info_get_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # App Id
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def app_id_app_id_get(opts = {})
      data, _status_code, _headers = app_id_app_id_get_with_http_info(opts)
      data
    end

    # App Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def app_id_app_id_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.app_id_app_id_get ...'
      end
      # resource path
      local_var_path = '/app_id/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#app_id_app_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # App Id
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def app_id_app_id_get_0(opts = {})
      data, _status_code, _headers = app_id_app_id_get_0_with_http_info(opts)
      data
    end

    # App Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def app_id_app_id_get_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.app_id_app_id_get_0 ...'
      end
      # resource path
      local_var_path = '/app_id'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#app_id_app_id_get_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Build Resource
    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def build_resource_assets_path_get(path, opts = {})
      build_resource_assets_path_get_with_http_info(path, opts)
      nil
    end

    # Build Resource
    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def build_resource_assets_path_get_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.build_resource_assets_path_get ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling DefaultApi.build_resource_assets_path_get"
      end
      # resource path
      local_var_path = '/assets/{path}'.sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#build_resource_assets_path_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Embedding
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [CreateResponse]
    def create_embedding_sdapi_v1_create_embedding_post(body, opts = {})
      data, _status_code, _headers = create_embedding_sdapi_v1_create_embedding_post_with_http_info(body, opts)
      data
    end

    # Create Embedding
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateResponse, Integer, Hash)>] CreateResponse data, response status code and response headers
    def create_embedding_sdapi_v1_create_embedding_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_embedding_sdapi_v1_create_embedding_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.create_embedding_sdapi_v1_create_embedding_post"
      end
      # resource path
      local_var_path = '/sdapi/v1/create/embedding'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'CreateResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_embedding_sdapi_v1_create_embedding_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create Hypernetwork
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [CreateResponse]
    def create_hypernetwork_sdapi_v1_create_hypernetwork_post(body, opts = {})
      data, _status_code, _headers = create_hypernetwork_sdapi_v1_create_hypernetwork_post_with_http_info(body, opts)
      data
    end

    # Create Hypernetwork
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateResponse, Integer, Hash)>] CreateResponse data, response status code and response headers
    def create_hypernetwork_sdapi_v1_create_hypernetwork_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_hypernetwork_sdapi_v1_create_hypernetwork_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.create_hypernetwork_sdapi_v1_create_hypernetwork_post"
      end
      # resource path
      local_var_path = '/sdapi/v1/create/hypernetwork'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'CreateResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_hypernetwork_sdapi_v1_create_hypernetwork_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Download Sysinfo
    # @param [Hash] opts the optional parameters
    # @option opts [] :attachment  (default to false)
    # @return [nil]
    def download_sysinfo_internal_sysinfo_get(opts = {})
      download_sysinfo_internal_sysinfo_get_with_http_info(opts)
      nil
    end

    # Download Sysinfo
    # @param [Hash] opts the optional parameters
    # @option opts [] :attachment 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def download_sysinfo_internal_sysinfo_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.download_sysinfo_internal_sysinfo_get ...'
      end
      # resource path
      local_var_path = '/internal/sysinfo'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'attachment'] = opts[:'attachment'] if !opts[:'attachment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#download_sysinfo_internal_sysinfo_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Extras Batch Images Api
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ExtrasBatchImagesResponse]
    def extras_batch_images_api_sdapi_v1_extra_batch_images_post(body, opts = {})
      data, _status_code, _headers = extras_batch_images_api_sdapi_v1_extra_batch_images_post_with_http_info(body, opts)
      data
    end

    # Extras Batch Images Api
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExtrasBatchImagesResponse, Integer, Hash)>] ExtrasBatchImagesResponse data, response status code and response headers
    def extras_batch_images_api_sdapi_v1_extra_batch_images_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.extras_batch_images_api_sdapi_v1_extra_batch_images_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.extras_batch_images_api_sdapi_v1_extra_batch_images_post"
      end
      # resource path
      local_var_path = '/sdapi/v1/extra-batch-images'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ExtrasBatchImagesResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#extras_batch_images_api_sdapi_v1_extra_batch_images_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Extras Single Image Api
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ExtrasSingleImageResponse]
    def extras_single_image_api_sdapi_v1_extra_single_image_post(body, opts = {})
      data, _status_code, _headers = extras_single_image_api_sdapi_v1_extra_single_image_post_with_http_info(body, opts)
      data
    end

    # Extras Single Image Api
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExtrasSingleImageResponse, Integer, Hash)>] ExtrasSingleImageResponse data, response status code and response headers
    def extras_single_image_api_sdapi_v1_extra_single_image_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.extras_single_image_api_sdapi_v1_extra_single_image_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.extras_single_image_api_sdapi_v1_extra_single_image_post"
      end
      # resource path
      local_var_path = '/sdapi/v1/extra-single-image'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ExtrasSingleImageResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#extras_single_image_api_sdapi_v1_extra_single_image_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Favicon
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def favicon_favicon_ico_get(opts = {})
      favicon_favicon_ico_get_with_http_info(opts)
      nil
    end

    # Favicon
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def favicon_favicon_ico_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.favicon_favicon_ico_get ...'
      end
      # resource path
      local_var_path = '/favicon.ico'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#favicon_favicon_ico_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Fetch File
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename 
    # @return [nil]
    def fetch_file_sd_extra_networks_thumb_get(opts = {})
      fetch_file_sd_extra_networks_thumb_get_with_http_info(opts)
      nil
    end

    # Fetch File
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def fetch_file_sd_extra_networks_thumb_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.fetch_file_sd_extra_networks_thumb_get ...'
      end
      # resource path
      local_var_path = '/sd_extra_networks/thumb'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filename'] = opts[:'filename'] if !opts[:'filename'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#fetch_file_sd_extra_networks_thumb_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # File Deprecated
    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def file_deprecated_file_path_get(path, opts = {})
      file_deprecated_file_path_get_with_http_info(path, opts)
      nil
    end

    # File Deprecated
    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def file_deprecated_file_path_get_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.file_deprecated_file_path_get ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling DefaultApi.file_deprecated_file_path_get"
      end
      # resource path
      local_var_path = '/file/{path}'.sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#file_deprecated_file_path_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # File
    # @param path_or_url 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def file_file_path_or_url_get(path_or_url, opts = {})
      file_file_path_or_url_get_with_http_info(path_or_url, opts)
      nil
    end

    # File
    # @param path_or_url 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def file_file_path_or_url_get_with_http_info(path_or_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.file_file_path_or_url_get ...'
      end
      # verify the required parameter 'path_or_url' is set
      if @api_client.config.client_side_validation && path_or_url.nil?
        fail ArgumentError, "Missing the required parameter 'path_or_url' when calling DefaultApi.file_file_path_or_url_get"
      end
      # resource path
      local_var_path = '/file={path_or_url}'.sub('{' + 'path_or_url' + '}', path_or_url.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#file_file_path_or_url_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # File
    # @param path_or_url 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def file_file_path_or_url_head(path_or_url, opts = {})
      file_file_path_or_url_head_with_http_info(path_or_url, opts)
      nil
    end

    # File
    # @param path_or_url 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def file_file_path_or_url_head_with_http_info(path_or_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.file_file_path_or_url_head ...'
      end
      # verify the required parameter 'path_or_url' is set
      if @api_client.config.client_side_validation && path_or_url.nil?
        fail ArgumentError, "Missing the required parameter 'path_or_url' when calling DefaultApi.file_file_path_or_url_head"
      end
      # resource path
      local_var_path = '/file={path_or_url}'.sub('{' + 'path_or_url' + '}', path_or_url.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#file_file_path_or_url_head\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Cmd Flags
    # @param [Hash] opts the optional parameters
    # @return [Flags]
    def get_cmd_flags_sdapi_v1_cmd_flags_get(opts = {})
      data, _status_code, _headers = get_cmd_flags_sdapi_v1_cmd_flags_get_with_http_info(opts)
      data
    end

    # Get Cmd Flags
    # @param [Hash] opts the optional parameters
    # @return [Array<(Flags, Integer, Hash)>] Flags data, response status code and response headers
    def get_cmd_flags_sdapi_v1_cmd_flags_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_cmd_flags_sdapi_v1_cmd_flags_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/cmd-flags'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Flags' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_cmd_flags_sdapi_v1_cmd_flags_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Config
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_config_config_get(opts = {})
      get_config_config_get_with_http_info(opts)
      nil
    end

    # Get Config
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_config_config_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_config_config_get ...'
      end
      # resource path
      local_var_path = '/config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_config_config_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Config
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_config_config_get_0(opts = {})
      get_config_config_get_0_with_http_info(opts)
      nil
    end

    # Get Config
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_config_config_get_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_config_config_get_0 ...'
      end
      # resource path
      local_var_path = '/config/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_config_config_get_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Config
    # @param [Hash] opts the optional parameters
    # @return [Options]
    def get_config_sdapi_v1_options_get(opts = {})
      data, _status_code, _headers = get_config_sdapi_v1_options_get_with_http_info(opts)
      data
    end

    # Get Config
    # @param [Hash] opts the optional parameters
    # @return [Array<(Options, Integer, Hash)>] Options data, response status code and response headers
    def get_config_sdapi_v1_options_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_config_sdapi_v1_options_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/options'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Options' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_config_sdapi_v1_options_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Current User
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_current_user_user_get(opts = {})
      data, _status_code, _headers = get_current_user_user_get_with_http_info(opts)
      data
    end

    # Get Current User
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_current_user_user_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_current_user_user_get ...'
      end
      # resource path
      local_var_path = '/user/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_current_user_user_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Current User
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_current_user_user_get_0(opts = {})
      data, _status_code, _headers = get_current_user_user_get_0_with_http_info(opts)
      data
    end

    # Get Current User
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_current_user_user_get_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_current_user_user_get_0 ...'
      end
      # resource path
      local_var_path = '/user'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_current_user_user_get_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Embeddings
    # @param [Hash] opts the optional parameters
    # @return [EmbeddingsResponse]
    def get_embeddings_sdapi_v1_embeddings_get(opts = {})
      data, _status_code, _headers = get_embeddings_sdapi_v1_embeddings_get_with_http_info(opts)
      data
    end

    # Get Embeddings
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmbeddingsResponse, Integer, Hash)>] EmbeddingsResponse data, response status code and response headers
    def get_embeddings_sdapi_v1_embeddings_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_embeddings_sdapi_v1_embeddings_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/embeddings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'EmbeddingsResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_embeddings_sdapi_v1_embeddings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Face Restorers
    # @param [Hash] opts the optional parameters
    # @return [Array<FaceRestorerItem>]
    def get_face_restorers_sdapi_v1_face_restorers_get(opts = {})
      data, _status_code, _headers = get_face_restorers_sdapi_v1_face_restorers_get_with_http_info(opts)
      data
    end

    # Get Face Restorers
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FaceRestorerItem>, Integer, Hash)>] Array<FaceRestorerItem> data, response status code and response headers
    def get_face_restorers_sdapi_v1_face_restorers_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_face_restorers_sdapi_v1_face_restorers_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/face-restorers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<FaceRestorerItem>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_face_restorers_sdapi_v1_face_restorers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Hypernetworks
    # @param [Hash] opts the optional parameters
    # @return [Array<HypernetworkItem>]
    def get_hypernetworks_sdapi_v1_hypernetworks_get(opts = {})
      data, _status_code, _headers = get_hypernetworks_sdapi_v1_hypernetworks_get_with_http_info(opts)
      data
    end

    # Get Hypernetworks
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<HypernetworkItem>, Integer, Hash)>] Array<HypernetworkItem> data, response status code and response headers
    def get_hypernetworks_sdapi_v1_hypernetworks_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_hypernetworks_sdapi_v1_hypernetworks_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/hypernetworks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<HypernetworkItem>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_hypernetworks_sdapi_v1_hypernetworks_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Latent Upscale Modes
    # @param [Hash] opts the optional parameters
    # @return [Array<LatentUpscalerModeItem>]
    def get_latent_upscale_modes_sdapi_v1_latent_upscale_modes_get(opts = {})
      data, _status_code, _headers = get_latent_upscale_modes_sdapi_v1_latent_upscale_modes_get_with_http_info(opts)
      data
    end

    # Get Latent Upscale Modes
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<LatentUpscalerModeItem>, Integer, Hash)>] Array<LatentUpscalerModeItem> data, response status code and response headers
    def get_latent_upscale_modes_sdapi_v1_latent_upscale_modes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_latent_upscale_modes_sdapi_v1_latent_upscale_modes_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/latent-upscale-modes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<LatentUpscalerModeItem>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_latent_upscale_modes_sdapi_v1_latent_upscale_modes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Loras
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_loras_sdapi_v1_loras_get(opts = {})
      get_loras_sdapi_v1_loras_get_with_http_info(opts)
      nil
    end

    # Get Loras
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_loras_sdapi_v1_loras_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_loras_sdapi_v1_loras_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/loras'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_loras_sdapi_v1_loras_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Memory
    # @param [Hash] opts the optional parameters
    # @return [MemoryResponse]
    def get_memory_sdapi_v1_memory_get(opts = {})
      data, _status_code, _headers = get_memory_sdapi_v1_memory_get_with_http_info(opts)
      data
    end

    # Get Memory
    # @param [Hash] opts the optional parameters
    # @return [Array<(MemoryResponse, Integer, Hash)>] MemoryResponse data, response status code and response headers
    def get_memory_sdapi_v1_memory_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_memory_sdapi_v1_memory_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/memory'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'MemoryResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_memory_sdapi_v1_memory_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page 
    # @option opts [String] :item 
    # @return [nil]
    def get_metadata_sd_extra_networks_metadata_get(opts = {})
      get_metadata_sd_extra_networks_metadata_get_with_http_info(opts)
      nil
    end

    # Get Metadata
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page 
    # @option opts [String] :item 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_metadata_sd_extra_networks_metadata_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_metadata_sd_extra_networks_metadata_get ...'
      end
      # resource path
      local_var_path = '/sd_extra_networks/metadata'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'item'] = opts[:'item'] if !opts[:'item'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_metadata_sd_extra_networks_metadata_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Prompt Styles
    # @param [Hash] opts the optional parameters
    # @return [Array<PromptStyleItem>]
    def get_prompt_styles_sdapi_v1_prompt_styles_get(opts = {})
      data, _status_code, _headers = get_prompt_styles_sdapi_v1_prompt_styles_get_with_http_info(opts)
      data
    end

    # Get Prompt Styles
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PromptStyleItem>, Integer, Hash)>] Array<PromptStyleItem> data, response status code and response headers
    def get_prompt_styles_sdapi_v1_prompt_styles_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_prompt_styles_sdapi_v1_prompt_styles_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/prompt-styles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<PromptStyleItem>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_prompt_styles_sdapi_v1_prompt_styles_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Queue Status
    # @param [Hash] opts the optional parameters
    # @return [Estimation]
    def get_queue_status_queue_status_get(opts = {})
      data, _status_code, _headers = get_queue_status_queue_status_get_with_http_info(opts)
      data
    end

    # Get Queue Status
    # @param [Hash] opts the optional parameters
    # @return [Array<(Estimation, Integer, Hash)>] Estimation data, response status code and response headers
    def get_queue_status_queue_status_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_queue_status_queue_status_get ...'
      end
      # resource path
      local_var_path = '/queue/status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Estimation' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_queue_status_queue_status_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Realesrgan Models
    # @param [Hash] opts the optional parameters
    # @return [Array<RealesrganItem>]
    def get_realesrgan_models_sdapi_v1_realesrgan_models_get(opts = {})
      data, _status_code, _headers = get_realesrgan_models_sdapi_v1_realesrgan_models_get_with_http_info(opts)
      data
    end

    # Get Realesrgan Models
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<RealesrganItem>, Integer, Hash)>] Array<RealesrganItem> data, response status code and response headers
    def get_realesrgan_models_sdapi_v1_realesrgan_models_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_realesrgan_models_sdapi_v1_realesrgan_models_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/realesrgan-models'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<RealesrganItem>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_realesrgan_models_sdapi_v1_realesrgan_models_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Samplers
    # @param [Hash] opts the optional parameters
    # @return [Array<SamplerItem>]
    def get_samplers_sdapi_v1_samplers_get(opts = {})
      data, _status_code, _headers = get_samplers_sdapi_v1_samplers_get_with_http_info(opts)
      data
    end

    # Get Samplers
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SamplerItem>, Integer, Hash)>] Array<SamplerItem> data, response status code and response headers
    def get_samplers_sdapi_v1_samplers_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_samplers_sdapi_v1_samplers_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/samplers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<SamplerItem>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_samplers_sdapi_v1_samplers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Script Info
    # @param [Hash] opts the optional parameters
    # @return [Array<ScriptInfo>]
    def get_script_info_sdapi_v1_script_info_get(opts = {})
      data, _status_code, _headers = get_script_info_sdapi_v1_script_info_get_with_http_info(opts)
      data
    end

    # Get Script Info
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ScriptInfo>, Integer, Hash)>] Array<ScriptInfo> data, response status code and response headers
    def get_script_info_sdapi_v1_script_info_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_script_info_sdapi_v1_script_info_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/script-info'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<ScriptInfo>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_script_info_sdapi_v1_script_info_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Scripts List
    # @param [Hash] opts the optional parameters
    # @return [ScriptsList]
    def get_scripts_list_sdapi_v1_scripts_get(opts = {})
      data, _status_code, _headers = get_scripts_list_sdapi_v1_scripts_get_with_http_info(opts)
      data
    end

    # Get Scripts List
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScriptsList, Integer, Hash)>] ScriptsList data, response status code and response headers
    def get_scripts_list_sdapi_v1_scripts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_scripts_list_sdapi_v1_scripts_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/scripts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ScriptsList' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_scripts_list_sdapi_v1_scripts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Sd Models
    # @param [Hash] opts the optional parameters
    # @return [Array<SDModelItem>]
    def get_sd_models_sdapi_v1_sd_models_get(opts = {})
      data, _status_code, _headers = get_sd_models_sdapi_v1_sd_models_get_with_http_info(opts)
      data
    end

    # Get Sd Models
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SDModelItem>, Integer, Hash)>] Array<SDModelItem> data, response status code and response headers
    def get_sd_models_sdapi_v1_sd_models_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_sd_models_sdapi_v1_sd_models_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/sd-models'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<SDModelItem>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_sd_models_sdapi_v1_sd_models_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Sd Vaes
    # @param [Hash] opts the optional parameters
    # @return [Array<SDVaeItem>]
    def get_sd_vaes_sdapi_v1_sd_vae_get(opts = {})
      data, _status_code, _headers = get_sd_vaes_sdapi_v1_sd_vae_get_with_http_info(opts)
      data
    end

    # Get Sd Vaes
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SDVaeItem>, Integer, Hash)>] Array<SDVaeItem> data, response status code and response headers
    def get_sd_vaes_sdapi_v1_sd_vae_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_sd_vaes_sdapi_v1_sd_vae_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/sd-vae'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<SDVaeItem>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_sd_vaes_sdapi_v1_sd_vae_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Single Card
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page 
    # @option opts [String] :tabname 
    # @option opts [String] :name 
    # @return [nil]
    def get_single_card_sd_extra_networks_get_single_card_get(opts = {})
      get_single_card_sd_extra_networks_get_single_card_get_with_http_info(opts)
      nil
    end

    # Get Single Card
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page 
    # @option opts [String] :tabname 
    # @option opts [String] :name 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_single_card_sd_extra_networks_get_single_card_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_single_card_sd_extra_networks_get_single_card_get ...'
      end
      # resource path
      local_var_path = '/sd_extra_networks/get-single-card'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'tabname'] = opts[:'tabname'] if !opts[:'tabname'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_single_card_sd_extra_networks_get_single_card_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Token
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_token_token_get(opts = {})
      data, _status_code, _headers = get_token_token_get_with_http_info(opts)
      data
    end

    # Get Token
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_token_token_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_token_token_get ...'
      end
      # resource path
      local_var_path = '/token/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_token_token_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Token
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_token_token_get_0(opts = {})
      data, _status_code, _headers = get_token_token_get_0_with_http_info(opts)
      data
    end

    # Get Token
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def get_token_token_get_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_token_token_get_0 ...'
      end
      # resource path
      local_var_path = '/token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Object' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_token_token_get_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Upscalers
    # @param [Hash] opts the optional parameters
    # @return [Array<UpscalerItem>]
    def get_upscalers_sdapi_v1_upscalers_get(opts = {})
      data, _status_code, _headers = get_upscalers_sdapi_v1_upscalers_get_with_http_info(opts)
      data
    end

    # Get Upscalers
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<UpscalerItem>, Integer, Hash)>] Array<UpscalerItem> data, response status code and response headers
    def get_upscalers_sdapi_v1_upscalers_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_upscalers_sdapi_v1_upscalers_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/upscalers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<UpscalerItem>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_upscalers_sdapi_v1_upscalers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Img2Imgapi
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ImageToImageResponse]
    def img2imgapi_sdapi_v1_img2img_post(body, opts = {})
      data, _status_code, _headers = img2imgapi_sdapi_v1_img2img_post_with_http_info(body, opts)
      data
    end

    # Img2Imgapi
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImageToImageResponse, Integer, Hash)>] ImageToImageResponse data, response status code and response headers
    def img2imgapi_sdapi_v1_img2img_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.img2imgapi_sdapi_v1_img2img_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.img2imgapi_sdapi_v1_img2img_post"
      end
      # resource path
      local_var_path = '/sdapi/v1/img2img'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ImageToImageResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#img2imgapi_sdapi_v1_img2img_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Interrogateapi
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def interrogateapi_sdapi_v1_interrogate_post(body, opts = {})
      interrogateapi_sdapi_v1_interrogate_post_with_http_info(body, opts)
      nil
    end

    # Interrogateapi
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def interrogateapi_sdapi_v1_interrogate_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.interrogateapi_sdapi_v1_interrogate_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.interrogateapi_sdapi_v1_interrogate_post"
      end
      # resource path
      local_var_path = '/sdapi/v1/interrogate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#interrogateapi_sdapi_v1_interrogate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Interruptapi
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def interruptapi_sdapi_v1_interrupt_post(opts = {})
      interruptapi_sdapi_v1_interrupt_post_with_http_info(opts)
      nil
    end

    # Interruptapi
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def interruptapi_sdapi_v1_interrupt_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.interruptapi_sdapi_v1_interrupt_post ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/interrupt'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#interruptapi_sdapi_v1_interrupt_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # <Lambda>
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def lambda_internal_ping_get(opts = {})
      lambda_internal_ping_get_with_http_info(opts)
      nil
    end

    # &lt;Lambda&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def lambda_internal_ping_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.lambda_internal_ping_get ...'
      end
      # resource path
      local_var_path = '/internal/ping'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#lambda_internal_ping_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # <Lambda>
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def lambda_internal_profile_startup_get(opts = {})
      lambda_internal_profile_startup_get_with_http_info(opts)
      nil
    end

    # &lt;Lambda&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def lambda_internal_profile_startup_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.lambda_internal_profile_startup_get ...'
      end
      # resource path
      local_var_path = '/internal/profile-startup'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#lambda_internal_profile_startup_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # <Lambda>
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def lambda_internal_sysinfo_download_get(opts = {})
      lambda_internal_sysinfo_download_get_with_http_info(opts)
      nil
    end

    # &lt;Lambda&gt;
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def lambda_internal_sysinfo_download_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.lambda_internal_sysinfo_download_get ...'
      end
      # resource path
      local_var_path = '/internal/sysinfo-download'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#lambda_internal_sysinfo_download_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Login Check
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def login_check_login_check_get(opts = {})
      login_check_login_check_get_with_http_info(opts)
      nil
    end

    # Login Check
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def login_check_login_check_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.login_check_login_check_get ...'
      end
      # resource path
      local_var_path = '/login_check/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#login_check_login_check_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Login Check
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def login_check_login_check_get_0(opts = {})
      login_check_login_check_get_0_with_http_info(opts)
      nil
    end

    # Login Check
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def login_check_login_check_get_0_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.login_check_login_check_get_0 ...'
      end
      # resource path
      local_var_path = '/login_check'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#login_check_login_check_get_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Login
    # @param grant_type 
    # @param username 
    # @param password 
    # @param scope 
    # @param client_id 
    # @param client_secret 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def login_login_post(grant_type, username, password, scope, client_id, client_secret, opts = {})
      login_login_post_with_http_info(grant_type, username, password, scope, client_id, client_secret, opts)
      nil
    end

    # Login
    # @param grant_type 
    # @param username 
    # @param password 
    # @param scope 
    # @param client_id 
    # @param client_secret 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def login_login_post_with_http_info(grant_type, username, password, scope, client_id, client_secret, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.login_login_post ...'
      end
      # verify the required parameter 'grant_type' is set
      if @api_client.config.client_side_validation && grant_type.nil?
        fail ArgumentError, "Missing the required parameter 'grant_type' when calling DefaultApi.login_login_post"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.login_login_post"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling DefaultApi.login_login_post"
      end
      # verify the required parameter 'scope' is set
      if @api_client.config.client_side_validation && scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling DefaultApi.login_login_post"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling DefaultApi.login_login_post"
      end
      # verify the required parameter 'client_secret' is set
      if @api_client.config.client_side_validation && client_secret.nil?
        fail ArgumentError, "Missing the required parameter 'client_secret' when calling DefaultApi.login_login_post"
      end
      # resource path
      local_var_path = '/login/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['grant_type'] = grant_type
      form_params['username'] = username
      form_params['password'] = password
      form_params['scope'] = scope
      form_params['client_id'] = client_id
      form_params['client_secret'] = client_secret

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#login_login_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Login
    # @param grant_type 
    # @param username 
    # @param password 
    # @param scope 
    # @param client_id 
    # @param client_secret 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def login_login_post_0(grant_type, username, password, scope, client_id, client_secret, opts = {})
      login_login_post_0_with_http_info(grant_type, username, password, scope, client_id, client_secret, opts)
      nil
    end

    # Login
    # @param grant_type 
    # @param username 
    # @param password 
    # @param scope 
    # @param client_id 
    # @param client_secret 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def login_login_post_0_with_http_info(grant_type, username, password, scope, client_id, client_secret, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.login_login_post_0 ...'
      end
      # verify the required parameter 'grant_type' is set
      if @api_client.config.client_side_validation && grant_type.nil?
        fail ArgumentError, "Missing the required parameter 'grant_type' when calling DefaultApi.login_login_post_0"
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling DefaultApi.login_login_post_0"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling DefaultApi.login_login_post_0"
      end
      # verify the required parameter 'scope' is set
      if @api_client.config.client_side_validation && scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling DefaultApi.login_login_post_0"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling DefaultApi.login_login_post_0"
      end
      # verify the required parameter 'client_secret' is set
      if @api_client.config.client_side_validation && client_secret.nil?
        fail ArgumentError, "Missing the required parameter 'client_secret' when calling DefaultApi.login_login_post_0"
      end
      # resource path
      local_var_path = '/login'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['grant_type'] = grant_type
      form_params['username'] = username
      form_params['password'] = password
      form_params['scope'] = scope
      form_params['client_id'] = client_id
      form_params['client_secret'] = client_secret

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#login_login_post_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Main
    # @param [Hash] opts the optional parameters
    # @return [String]
    def main_get(opts = {})
      data, _status_code, _headers = main_get_with_http_info(opts)
      data
    end

    # Main
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def main_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.main_get ...'
      end
      # resource path
      local_var_path = '/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#main_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Main
    # @param [Hash] opts the optional parameters
    # @return [String]
    def main_head(opts = {})
      data, _status_code, _headers = main_head_with_http_info(opts)
      data
    end

    # Main
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def main_head_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.main_head ...'
      end
      # resource path
      local_var_path = '/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#main_head\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Pnginfoapi
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [PNGInfoResponse]
    def pnginfoapi_sdapi_v1_png_info_post(body, opts = {})
      data, _status_code, _headers = pnginfoapi_sdapi_v1_png_info_post_with_http_info(body, opts)
      data
    end

    # Pnginfoapi
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PNGInfoResponse, Integer, Hash)>] PNGInfoResponse data, response status code and response headers
    def pnginfoapi_sdapi_v1_png_info_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pnginfoapi_sdapi_v1_png_info_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.pnginfoapi_sdapi_v1_png_info_post"
      end
      # resource path
      local_var_path = '/sdapi/v1/png-info'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'PNGInfoResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pnginfoapi_sdapi_v1_png_info_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Predict
    # @param body 
    # @param api_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def predict_api_api_name_post(body, api_name, opts = {})
      predict_api_api_name_post_with_http_info(body, api_name, opts)
      nil
    end

    # Predict
    # @param body 
    # @param api_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def predict_api_api_name_post_with_http_info(body, api_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predict_api_api_name_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.predict_api_api_name_post"
      end
      # verify the required parameter 'api_name' is set
      if @api_client.config.client_side_validation && api_name.nil?
        fail ArgumentError, "Missing the required parameter 'api_name' when calling DefaultApi.predict_api_api_name_post"
      end
      # resource path
      local_var_path = '/api/{api_name}/'.sub('{' + 'api_name' + '}', api_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predict_api_api_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Predict
    # @param body 
    # @param api_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def predict_api_api_name_post_0(body, api_name, opts = {})
      predict_api_api_name_post_0_with_http_info(body, api_name, opts)
      nil
    end

    # Predict
    # @param body 
    # @param api_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def predict_api_api_name_post_0_with_http_info(body, api_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predict_api_api_name_post_0 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.predict_api_api_name_post_0"
      end
      # verify the required parameter 'api_name' is set
      if @api_client.config.client_side_validation && api_name.nil?
        fail ArgumentError, "Missing the required parameter 'api_name' when calling DefaultApi.predict_api_api_name_post_0"
      end
      # resource path
      local_var_path = '/api/{api_name}'.sub('{' + 'api_name' + '}', api_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predict_api_api_name_post_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Predict
    # @param body 
    # @param api_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def predict_run_api_name_post(body, api_name, opts = {})
      predict_run_api_name_post_with_http_info(body, api_name, opts)
      nil
    end

    # Predict
    # @param body 
    # @param api_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def predict_run_api_name_post_with_http_info(body, api_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predict_run_api_name_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.predict_run_api_name_post"
      end
      # verify the required parameter 'api_name' is set
      if @api_client.config.client_side_validation && api_name.nil?
        fail ArgumentError, "Missing the required parameter 'api_name' when calling DefaultApi.predict_run_api_name_post"
      end
      # resource path
      local_var_path = '/run/{api_name}/'.sub('{' + 'api_name' + '}', api_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predict_run_api_name_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Predict
    # @param body 
    # @param api_name 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def predict_run_api_name_post_0(body, api_name, opts = {})
      predict_run_api_name_post_0_with_http_info(body, api_name, opts)
      nil
    end

    # Predict
    # @param body 
    # @param api_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def predict_run_api_name_post_0_with_http_info(body, api_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.predict_run_api_name_post_0 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.predict_run_api_name_post_0"
      end
      # verify the required parameter 'api_name' is set
      if @api_client.config.client_side_validation && api_name.nil?
        fail ArgumentError, "Missing the required parameter 'api_name' when calling DefaultApi.predict_run_api_name_post_0"
      end
      # resource path
      local_var_path = '/run/{api_name}'.sub('{' + 'api_name' + '}', api_name.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#predict_run_api_name_post_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Preprocess
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [PreprocessResponse]
    def preprocess_sdapi_v1_preprocess_post(body, opts = {})
      data, _status_code, _headers = preprocess_sdapi_v1_preprocess_post_with_http_info(body, opts)
      data
    end

    # Preprocess
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PreprocessResponse, Integer, Hash)>] PreprocessResponse data, response status code and response headers
    def preprocess_sdapi_v1_preprocess_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.preprocess_sdapi_v1_preprocess_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.preprocess_sdapi_v1_preprocess_post"
      end
      # resource path
      local_var_path = '/sdapi/v1/preprocess'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'PreprocessResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#preprocess_sdapi_v1_preprocess_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Progressapi
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ModulesProgressProgressResponse]
    def progressapi_internal_progress_post(body, opts = {})
      data, _status_code, _headers = progressapi_internal_progress_post_with_http_info(body, opts)
      data
    end

    # Progressapi
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ModulesProgressProgressResponse, Integer, Hash)>] ModulesProgressProgressResponse data, response status code and response headers
    def progressapi_internal_progress_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.progressapi_internal_progress_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.progressapi_internal_progress_post"
      end
      # resource path
      local_var_path = '/internal/progress'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ModulesProgressProgressResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#progressapi_internal_progress_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Progressapi
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :skip_current_image  (default to false)
    # @return [ModulesApiModelsProgressResponse]
    def progressapi_sdapi_v1_progress_get(opts = {})
      data, _status_code, _headers = progressapi_sdapi_v1_progress_get_with_http_info(opts)
      data
    end

    # Progressapi
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :skip_current_image 
    # @return [Array<(ModulesApiModelsProgressResponse, Integer, Hash)>] ModulesApiModelsProgressResponse data, response status code and response headers
    def progressapi_sdapi_v1_progress_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.progressapi_sdapi_v1_progress_get ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/progress'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'skip_current_image'] = opts[:'skip_current_image'] if !opts[:'skip_current_image'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ModulesApiModelsProgressResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#progressapi_sdapi_v1_progress_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Quicksettings Hint
    # @param [Hash] opts the optional parameters
    # @return [Array<QuicksettingsHint>]
    def quicksettings_hint_internal_quicksettings_hint_get(opts = {})
      data, _status_code, _headers = quicksettings_hint_internal_quicksettings_hint_get_with_http_info(opts)
      data
    end

    # Quicksettings Hint
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<QuicksettingsHint>, Integer, Hash)>] Array<QuicksettingsHint> data, response status code and response headers
    def quicksettings_hint_internal_quicksettings_hint_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.quicksettings_hint_internal_quicksettings_hint_get ...'
      end
      # resource path
      local_var_path = '/internal/quicksettings-hint'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<QuicksettingsHint>' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#quicksettings_hint_internal_quicksettings_hint_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Refresh Checkpoints
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def refresh_checkpoints_sdapi_v1_refresh_checkpoints_post(opts = {})
      refresh_checkpoints_sdapi_v1_refresh_checkpoints_post_with_http_info(opts)
      nil
    end

    # Refresh Checkpoints
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def refresh_checkpoints_sdapi_v1_refresh_checkpoints_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.refresh_checkpoints_sdapi_v1_refresh_checkpoints_post ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/refresh-checkpoints'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#refresh_checkpoints_sdapi_v1_refresh_checkpoints_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Refresh Loras
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def refresh_loras_sdapi_v1_refresh_loras_post(opts = {})
      refresh_loras_sdapi_v1_refresh_loras_post_with_http_info(opts)
      nil
    end

    # Refresh Loras
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def refresh_loras_sdapi_v1_refresh_loras_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.refresh_loras_sdapi_v1_refresh_loras_post ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/refresh-loras'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#refresh_loras_sdapi_v1_refresh_loras_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reloadapi
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reloadapi_sdapi_v1_reload_checkpoint_post(opts = {})
      reloadapi_sdapi_v1_reload_checkpoint_post_with_http_info(opts)
      nil
    end

    # Reloadapi
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reloadapi_sdapi_v1_reload_checkpoint_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reloadapi_sdapi_v1_reload_checkpoint_post ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/reload-checkpoint'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reloadapi_sdapi_v1_reload_checkpoint_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset Iterator
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_iterator_reset_post(body, opts = {})
      reset_iterator_reset_post_with_http_info(body, opts)
      nil
    end

    # Reset Iterator
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reset_iterator_reset_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reset_iterator_reset_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.reset_iterator_reset_post"
      end
      # resource path
      local_var_path = '/reset'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reset_iterator_reset_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reset Iterator
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_iterator_reset_post_0(body, opts = {})
      reset_iterator_reset_post_0_with_http_info(body, opts)
      nil
    end

    # Reset Iterator
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reset_iterator_reset_post_0_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reset_iterator_reset_post_0 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.reset_iterator_reset_post_0"
      end
      # resource path
      local_var_path = '/reset/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reset_iterator_reset_post_0\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reverse Proxy
    # @param url_path 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reverse_proxy_proxy_url_path_get(url_path, opts = {})
      reverse_proxy_proxy_url_path_get_with_http_info(url_path, opts)
      nil
    end

    # Reverse Proxy
    # @param url_path 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reverse_proxy_proxy_url_path_get_with_http_info(url_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reverse_proxy_proxy_url_path_get ...'
      end
      # verify the required parameter 'url_path' is set
      if @api_client.config.client_side_validation && url_path.nil?
        fail ArgumentError, "Missing the required parameter 'url_path' when calling DefaultApi.reverse_proxy_proxy_url_path_get"
      end
      # resource path
      local_var_path = '/proxy={url_path}'.sub('{' + 'url_path' + '}', url_path.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reverse_proxy_proxy_url_path_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Reverse Proxy
    # @param url_path 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reverse_proxy_proxy_url_path_head(url_path, opts = {})
      reverse_proxy_proxy_url_path_head_with_http_info(url_path, opts)
      nil
    end

    # Reverse Proxy
    # @param url_path 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def reverse_proxy_proxy_url_path_head_with_http_info(url_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.reverse_proxy_proxy_url_path_head ...'
      end
      # verify the required parameter 'url_path' is set
      if @api_client.config.client_side_validation && url_path.nil?
        fail ArgumentError, "Missing the required parameter 'url_path' when calling DefaultApi.reverse_proxy_proxy_url_path_head"
      end
      # resource path
      local_var_path = '/proxy={url_path}'.sub('{' + 'url_path' + '}', url_path.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#reverse_proxy_proxy_url_path_head\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Robots Txt
    # @param [Hash] opts the optional parameters
    # @return [String]
    def robots_txt_robots_txt_get(opts = {})
      data, _status_code, _headers = robots_txt_robots_txt_get_with_http_info(opts)
      data
    end

    # Robots Txt
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def robots_txt_robots_txt_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.robots_txt_robots_txt_get ...'
      end
      # resource path
      local_var_path = '/robots.txt'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#robots_txt_robots_txt_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set Config
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_config_sdapi_v1_options_post(body, opts = {})
      set_config_sdapi_v1_options_post_with_http_info(body, opts)
      nil
    end

    # Set Config
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_config_sdapi_v1_options_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_config_sdapi_v1_options_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.set_config_sdapi_v1_options_post"
      end
      # resource path
      local_var_path = '/sdapi/v1/options'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_config_sdapi_v1_options_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Skip
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def skip_sdapi_v1_skip_post(opts = {})
      skip_sdapi_v1_skip_post_with_http_info(opts)
      nil
    end

    # Skip
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def skip_sdapi_v1_skip_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.skip_sdapi_v1_skip_post ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/skip'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#skip_sdapi_v1_skip_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Startup Events
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def startup_events_startup_events_get(opts = {})
      startup_events_startup_events_get_with_http_info(opts)
      nil
    end

    # Startup Events
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def startup_events_startup_events_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.startup_events_startup_events_get ...'
      end
      # resource path
      local_var_path = '/startup-events'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#startup_events_startup_events_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Static Resource
    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def static_resource_static_path_get(path, opts = {})
      static_resource_static_path_get_with_http_info(path, opts)
      nil
    end

    # Static Resource
    # @param path 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def static_resource_static_path_get_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.static_resource_static_path_get ...'
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling DefaultApi.static_resource_static_path_get"
      end
      # resource path
      local_var_path = '/static/{path}'.sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#static_resource_static_path_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Text2Imgapi
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [TextToImageResponse]
    def text2imgapi_sdapi_v1_txt2img_post(body, opts = {})
      data, _status_code, _headers = text2imgapi_sdapi_v1_txt2img_post_with_http_info(body, opts)
      data
    end

    # Text2Imgapi
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TextToImageResponse, Integer, Hash)>] TextToImageResponse data, response status code and response headers
    def text2imgapi_sdapi_v1_txt2img_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.text2imgapi_sdapi_v1_txt2img_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.text2imgapi_sdapi_v1_txt2img_post"
      end
      # resource path
      local_var_path = '/sdapi/v1/txt2img'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'TextToImageResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#text2imgapi_sdapi_v1_txt2img_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Theme Css
    # @param [Hash] opts the optional parameters
    # @return [String]
    def theme_css_theme_css_get(opts = {})
      data, _status_code, _headers = theme_css_theme_css_get_with_http_info(opts)
      data
    end

    # Theme Css
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def theme_css_theme_css_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.theme_css_theme_css_get ...'
      end
      # resource path
      local_var_path = '/theme.css'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#theme_css_theme_css_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Train Embedding
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [TrainResponse]
    def train_embedding_sdapi_v1_train_embedding_post(body, opts = {})
      data, _status_code, _headers = train_embedding_sdapi_v1_train_embedding_post_with_http_info(body, opts)
      data
    end

    # Train Embedding
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TrainResponse, Integer, Hash)>] TrainResponse data, response status code and response headers
    def train_embedding_sdapi_v1_train_embedding_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.train_embedding_sdapi_v1_train_embedding_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.train_embedding_sdapi_v1_train_embedding_post"
      end
      # resource path
      local_var_path = '/sdapi/v1/train/embedding'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'TrainResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#train_embedding_sdapi_v1_train_embedding_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Train Hypernetwork
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [TrainResponse]
    def train_hypernetwork_sdapi_v1_train_hypernetwork_post(body, opts = {})
      data, _status_code, _headers = train_hypernetwork_sdapi_v1_train_hypernetwork_post_with_http_info(body, opts)
      data
    end

    # Train Hypernetwork
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TrainResponse, Integer, Hash)>] TrainResponse data, response status code and response headers
    def train_hypernetwork_sdapi_v1_train_hypernetwork_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.train_hypernetwork_sdapi_v1_train_hypernetwork_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.train_hypernetwork_sdapi_v1_train_hypernetwork_post"
      end
      # resource path
      local_var_path = '/sdapi/v1/train/hypernetwork'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'TrainResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#train_hypernetwork_sdapi_v1_train_hypernetwork_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unloadapi
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unloadapi_sdapi_v1_unload_checkpoint_post(opts = {})
      unloadapi_sdapi_v1_unload_checkpoint_post_with_http_info(opts)
      nil
    end

    # Unloadapi
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def unloadapi_sdapi_v1_unload_checkpoint_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.unloadapi_sdapi_v1_unload_checkpoint_post ...'
      end
      # resource path
      local_var_path = '/sdapi/v1/unload-checkpoint'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#unloadapi_sdapi_v1_unload_checkpoint_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Upload File
    # @param files 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def upload_file_upload_post(files, opts = {})
      upload_file_upload_post_with_http_info(files, opts)
      nil
    end

    # Upload File
    # @param files 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def upload_file_upload_post_with_http_info(files, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.upload_file_upload_post ...'
      end
      # verify the required parameter 'files' is set
      if @api_client.config.client_side_validation && files.nil?
        fail ArgumentError, "Missing the required parameter 'files' when calling DefaultApi.upload_file_upload_post"
      end
      # resource path
      local_var_path = '/upload'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['files'] = @api_client.build_collection_param(files, :multi)

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#upload_file_upload_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
